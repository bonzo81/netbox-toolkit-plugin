{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NetBox Toolkit Plugin","text":"<p>The NetBox Toolkit plugin allows you to run command execution directly from NetBox device pages or via the API. Features command variables, command history, encrypted credential storage with token authentication for API, and comprehensive logging options.</p> <p>\u26a0\ufe0f EARLY DEVELOPMENT WARNING \u26a0\ufe0f This plugin is in very early development and not recommended for production use. There will be bugs and possible incomplete functionality. Use at your own risk! If you do, give some feedback in Discussions</p>"},{"location":"#core-features","title":"\ud83d\udccb Core Features","text":"<ul> <li> <p>\ud83d\udd27 Command Creation: Define platform-specific commands (show/config types) with variables</p> </li> <li> <p>\u26a1 Command Execution: Run commands from device pages via \"Toolkit\" tab or REST API</p> </li> <li>\ud83d\udcc4 Raw Output: View complete, unfiltered command responses</li> <li>\ud83d\udd0d Parsed Output: Automatic JSON parsing using textFSM templates</li> <li>\ud83d\udcca Command Logs: Complete execution history with timestamps</li> <li>\ud83d\udd10 Secure Credentials: Encrypted storage with credential tokens via API, or on-the-fly entry in the GUI (no storage required)</li> <li>\ud83d\udcca Statistics Dashboard: Execution analytics, success rates, and performance metrics</li> <li>\ud83d\ude80 Bulk Operations: Execute multiple commands across multiple devices via API</li> <li>\ud83d\udc1b Debug Logging: Optional detailed logging for troubleshooting</li> </ul>"},{"location":"#essential-guides","title":"\ud83d\udcda Essential Guides","text":""},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<ul> <li>\ud83d\udce6 Plugin Installation - Install the plugin in your NetBox environment</li> <li>\ud83d\udd04 Plugin Upgrade - Upgrade to newer versions</li> <li>\u2699\ufe0f Plugin Configuration - Configure plugin settings and security options</li> <li>\ud83d\udd10 Permissions Creation - Set up user access and permissions</li> <li>\ud83d\udccb Command Creation - Create platform-specific commands with variables</li> <li>\ud83d\udd11 Device Credentials - Secure credential storage and token management</li> <li>\ud83d\udcdd Logging Guide - Enable logging for troubleshooting</li> </ul>"},{"location":"#api-integration","title":"\ud83d\udd0c API Integration","text":"<ul> <li>\ud83d\udcd6 API Overview - REST API capabilities and features</li> <li>\ud83d\udd11 Authentication &amp; Permissions - API authentication with credential tokens</li> <li>\u26a1 Commands API - Command execution and management</li> <li>\ud83d\udcca Command Logs API - Access execution history and logs</li> <li>\ud83d\udee1\ufe0f Error Handling - API error responses and troubleshooting</li> <li>\ud83d\udd04 API Workflows - Common API usage patterns</li> <li>\ud83e\udd16 Automation Examples - Scripts and automation scenarios</li> </ul>"},{"location":"#configuration-examples","title":"\ud83d\udccb Configuration Examples","text":"<ul> <li>\ud83d\udcdd Permission Examples - Example permission configurations</li> <li>\u2696\ufe0f GUI vs API Comparison - Feature comparison between web interface and API</li> </ul>"},{"location":"#development","title":"\ud83d\udc68\u200d\ud83d\udcbb Development","text":"<ul> <li>\ud83c\udfd7\ufe0f Developer Guide - Complete overview for contributors</li> <li>\ud83d\udd27 Development Setup - Set up your development environment</li> </ul>"},{"location":"#security-architecture","title":"Security Architecture","text":"<ul> <li>Credential Token System: Secure API execution using credential tokens (no password transmission)</li> <li>Fernet Encryption: AES-128 CBC + HMAC-SHA256 for credential encryption</li> <li>Argon2id: Secure key derivation and token hashing with pepper-based authentication</li> <li>Encrypted Storage: Device credentials encrypted with unique keys per set</li> <li>User Isolation: Credential tokens bound to specific users</li> <li>No Credential Transmission: Passwords never sent in API calls</li> <li>Secure Audit Trail: Operations logged with sanitized data (credentials excluded from change logs)</li> </ul>"},{"location":"#built-with","title":"Built With","text":"<ul> <li>Scrapli: Primary network device connection library (SSH/Telnet/NETCONF)</li> <li>Scrapli Community: Extended platform support for network devices</li> <li>Netmiko: Fallback SSH client for enhanced device compatibility</li> <li>TextFSM: Structured data parsing for command outputs</li> </ul> <p>See Platform Support for detailed information on supported network devices and connection methods.</p>"},{"location":"#minimal-install","title":"Minimal Install","text":"<p>Installation:</p> <pre><code># 1. Install the plugin\npip install netbox-toolkit-plugin\n\n# 2. Add to NetBox configuration.py\nPLUGINS = ['netbox_toolkit_plugin']\n\n# 3. Configure security pepper (REQUIRED)\npython3 -c \"import secrets; print(secrets.token_urlsafe(48))\"  # Generate pepper\n\nPLUGINS_CONFIG = {\n    'netbox_toolkit_plugin': {\n        'security': {\n            'pepper': 'your-generated-pepper-here',\n        },\n    },\n}\n\n# 4. Run migrations and restart\npython3 manage.py migrate netbox_toolkit_plugin\npython3 manage.py collectstatic --no-input\nsudo systemctl restart netbox netbox-rq\n</code></pre> <p>\ud83d\udcd6 Full installation guide: Plugin Installation</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#015-2025-10-16","title":"0.1.5 (2025-10-16)","text":"<ul> <li>Bug Fix: Fixed missing model parameter in command changelog URL that caused TypeError when viewing command change logs (#19)</li> </ul>"},{"location":"changelog/#014-2025-10-15","title":"0.1.4 (2025-10-15)","text":"<ul> <li>\ud83d\udd10 New Credential Token System</li> <li>\ud83c\udf10 Enhanced Platform Support</li> <li>\ud83d\udd27 Command Variables</li> <li>\ud83d\udcca GUI Improvements</li> <li>\ud83d\udee0\ufe0f Technical Improvements</li> <li>API Enhancements</li> <li>\ud83d\udcda Documentation Updates</li> </ul>"},{"location":"changelog/#013-2025-09-10","title":"0.1.3 (2025-09-10)","text":"<ul> <li>Simplify type hints in connectors</li> <li>Add permissions to navigation menu items</li> <li>Enhance netbox stop and status commands</li> <li>Add CSV download functionality and refactor codebase</li> </ul>"},{"location":"changelog/#012-2025-09-1","title":"0.1.2 (2025-09-1)","text":"<ul> <li>Add Dev container setup for local or codespace container development</li> <li>Rename config.py to setting.py to avoid missing plugin attribute issues in GUI</li> </ul>"},{"location":"changelog/#011-2025-07-11","title":"0.1.1 (2025-07-11)","text":"<ul> <li>Update plugin naming convention throughout the plugin</li> </ul>"},{"location":"changelog/#010-2025-07-2","title":"0.1.0 (2025-07-2)","text":"<p>Hello World!</p>"},{"location":"platform-support/","title":"Platform Support","text":"<p>The plugin uses Scrapli as the primary connection library with Netmiko as a fallback, providing robust support for various network device platforms.</p>"},{"location":"platform-support/#primary-connection-engine-scrapli","title":"Primary Connection Engine: Scrapli","text":"<p>Scrapli provides fast, modern SSH connectivity with structured output parsing capabilities:</p> <ul> <li>Cisco IOS/IOS-XE (<code>cisco_ios</code>)</li> <li>Cisco NX-OS (<code>cisco_nxos</code>)</li> <li>Cisco IOS-XR (<code>cisco_iosxr</code>)</li> <li>Juniper Junos (<code>juniper_junos</code>)</li> <li>Arista EOS (<code>arista_eos</code>)</li> </ul>"},{"location":"platform-support/#fallback-connection-netmiko","title":"Fallback Connection: Netmiko","text":"<p>When Scrapli encounters connection issues, the plugin automatically falls back to Netmiko for broader device compatibility:</p> <ul> <li>Extended Platform Support - Covers additional vendor platforms and older device models</li> <li>Legacy Device Support - Better compatibility with older firmware versions</li> <li>SSH Troubleshooting - Alternative SSH implementation for problematic connections</li> </ul>"},{"location":"platform-support/#key-benefits","title":"Key Benefits","text":"<ul> <li>Automatic Fallback: Seamless switching between connection methods</li> <li>TextFSM Integration: Structured data parsing for show commands</li> <li>JSON Output: Native support for modern network OS JSON responses</li> </ul>"},{"location":"platform-support/#platform-configuration","title":"Platform Configuration","text":"<p>Platforms are configured in NetBox's DCIM section. The plugin uses the platform's <code>slug</code> field to determine the appropriate connector:</p> <ul> <li>Ensure your devices have the correct platform assigned</li> <li>Use standard platform slugs (e.g., <code>cisco_ios</code>, <code>cisco_nxos</code>, <code>juniper_junos</code>)</li> <li>The plugin automatically normalizes platform names for compatibility</li> </ul> <p>For detailed configuration, see the Plugin Configuration Guide.</p>"},{"location":"api/","title":"API Reference","text":"<p>The NetBox Toolkit Plugin provides a comprehensive REST API for network device command execution and management. The API offers complete feature parity with the web interface and includes additional capabilities not available through the GUI, making it ideal for automation, integration, and advanced workflows.</p>"},{"location":"api/#key-advantages-of-the-api","title":"Key Advantages of the API","text":"<p>\ud83d\ude80 Enhanced Capabilities Beyond GUI: - Bulk Operations: Execute multiple commands across multiple devices simultaneously - Advanced Statistics: Comprehensive execution analytics and reporting - Flexible Export: Multiple formats with advanced filtering options - Programmatic Validation: Pre-validate variables without execution - Integration Ready: Perfect for automation workflows and third-party integrations</p> <p>\u2705 Complete Feature Parity: Every feature available in the web interface is fully accessible via API, ensuring consistent functionality across all access methods.</p>"},{"location":"api/#quick-start","title":"Quick Start","text":""},{"location":"api/#authentication","title":"Authentication","text":"<p>All API requests require authentication using NetBox's token system:</p> <pre><code>curl -H \"Authorization: Token YOUR_TOKEN_HERE\" \\\n     -H \"Content-Type: application/json\" \\\n     https://netbox.example.com/api/plugins/toolkit/commands/\n</code></pre>"},{"location":"api/#base-url","title":"Base URL","text":"<p>All API endpoints are prefixed with: <pre><code>/api/plugins/toolkit/\n</code></pre></p>"},{"location":"api/#available-resources","title":"Available Resources","text":"<p>Each API resource has its own dedicated documentation page:</p>"},{"location":"api/#api-endpoint-reference","title":"API Endpoint Reference \u2b50","text":"<ul> <li>Purpose: Complete endpoint reference with all fields and examples</li> <li>Key Features:</li> <li>All endpoints listed with available fields and types</li> <li>Request/response examples for every endpoint</li> <li>Error response documentation</li> <li>Quick reference for API integration</li> </ul>"},{"location":"api/#commands-api","title":"Commands API","text":"<ul> <li>Purpose: Manage network commands and execute them on devices</li> <li>Endpoints: <code>/commands/</code></li> <li>Key Features:</li> <li>Complete CRUD operations for command management</li> <li>Single and bulk command execution</li> <li>Variable validation and dynamic choices</li> <li>Advanced filtering and search capabilities</li> <li>API Exclusive: Bulk execution across multiple devices</li> </ul>"},{"location":"api/#command-logs-api","title":"Command Logs API","text":"<ul> <li>Purpose: Track command execution history and results</li> <li>Endpoints: <code>/command-logs/</code></li> <li>Key Features:</li> <li>Comprehensive execution history tracking</li> <li>API Exclusive: Advanced statistics and analytics</li> <li>Flexible export capabilities (CSV/JSON with date filtering)</li> <li>Performance monitoring and error analysis</li> </ul>"},{"location":"api/#authentication-permissions","title":"Authentication &amp; Permissions","text":"<ul> <li>Purpose: Security and access control</li> <li>Key Features: Token authentication, object permissions, action permissions</li> </ul>"},{"location":"api/#error-handling","title":"Error Handling","text":"<ul> <li>Purpose: Error codes and troubleshooting</li> <li>Key Features: Error structure, common errors, resolution strategies</li> </ul>"},{"location":"api/#gui-vs-api-comparison","title":"GUI vs API Comparison","text":"<ul> <li>Purpose: Comprehensive comparison between web interface and API</li> <li>Key Features: Feature matrix, use case guidance, migration strategies</li> </ul>"},{"location":"api/#api-workflows","title":"API Workflows","text":"<ul> <li>Purpose: Focused API workflow examples and integration patterns</li> <li>Key Features: Bulk operations, automation examples, integration code samples</li> </ul>"},{"location":"api/#automation-examples","title":"Automation Examples","text":"<ul> <li>Purpose: Real-world automation scenarios</li> <li>Key Features: Network monitoring, configuration management, compliance auditing</li> </ul>"},{"location":"api/#common-patterns","title":"Common Patterns","text":""},{"location":"api/#pagination","title":"Pagination","text":"<p>All list endpoints support pagination: <pre><code>GET /api/plugins/toolkit/commands/?limit=50&amp;offset=100\n</code></pre></p>"},{"location":"api/#filtering","title":"Filtering","text":"<p>Extensive filtering is available on most endpoints: <pre><code>GET /api/plugins/toolkit/commands/?platform_slug=cisco_ios&amp;command_type=show\n</code></pre></p>"},{"location":"api/#sorting","title":"Sorting","text":"<p>Results can be sorted using the <code>ordering</code> parameter: <pre><code>GET /api/plugins/toolkit/command-logs/?ordering=-execution_time\n</code></pre></p>"},{"location":"api/#interactive-documentation","title":"Interactive Documentation","text":"<ul> <li>Swagger UI: <code>/api/docs/</code></li> <li>ReDoc: <code>/api/redoc/</code></li> <li>OpenAPI Schema: <code>/api/schema/</code></li> </ul>"},{"location":"api/#rate-limiting","title":"Rate Limiting","text":"<p>The API implements intelligent rate limiting: - Device-specific limits: Protects individual network devices - User bypass capability: Configurable for privileged users - Smart counting: Only successful commands count toward limits</p>"},{"location":"api/auth/","title":"Authentication &amp; Permissions","text":"<p>The NetBox Toolkit API uses NetBox's standard authentication combined with credential tokens for enhanced security and user isolation.</p>"},{"location":"api/auth/#authentication-with-credential-tokens","title":"Authentication with Credential Tokens","text":""},{"location":"api/auth/#1-netbox-api-token-authentication","title":"1. NetBox API Token (Authentication)","text":"<p>Standard NetBox token for user authentication:</p> <ul> <li>Purpose: Identifies and authenticates the user to NetBox</li> <li>Location: <code>Authorization: Token &lt;your-netbox-api-token&gt;</code> header</li> <li>Scope: All NetBox API access</li> </ul>"},{"location":"api/auth/#2-credential-token-device-access","title":"2. Credential Token (Device Access)","text":"<p>Plugin-specific token for device credential access:</p> <ul> <li>Purpose: References encrypted device credentials (username/password)</li> <li>Location: <code>credential_token</code> field in request body</li> <li>Scope: Device command execution only</li> <li>Security: Bound to specific users, cannot access other users' credentials</li> </ul>"},{"location":"api/auth/#why-credential-tokens","title":"Why Credential Tokens?","text":"<p>\ud83d\udd12 Enhanced Security: Device credentials never transmitted in API calls</p> <p>\ud83d\udc64 User Isolation: Users can only access their own stored credential sets</p> <p>\ud83d\udcdd Audit Trail: All actions properly logged to user accounts</p> <p>\ud83d\udd04 Token Rotation: Credential tokens can be regenerated independently</p> <p>\ud83c\udfaf Granular Control: Different credential sets for different device groups</p>"},{"location":"api/auth/#getting-started","title":"Getting Started","text":""},{"location":"api/auth/#step-1-get-your-netbox-api-token","title":"Step 1: Get Your NetBox API Token","text":"<pre><code># Via NetBox Web UI:\n# 1. Log into NetBox\n# 2. Go to User \u2192 Profile \u2192 API Tokens\n# 3. Create a new token or copy an existing one\n</code></pre>"},{"location":"api/auth/#step-2-create-device-credential-sets","title":"Step 2: Create Device Credential Sets","text":"<p>Via NetBox Web Interface:</p> <ol> <li>Navigate to Plugins \u2192 Toolkit \u2192 Device Credential Sets</li> <li>Click \"Add Device Credential Set\"</li> <li>Enter details:<ul> <li>Name: Descriptive name (e.g., \"Production Network Credentials\")</li> <li>Description: Optional usage description</li> <li>Username: Device login username</li> <li>Password: Device login password</li> <li>Platforms: Optional - restrict to specific network platforms</li> </ul> </li> <li>Click \"Create\" and copy the generated credential token</li> <li>Store the credential token securely for API use</li> </ol> <p>Security Features: - Passwords are encrypted using Fernet encryption with unique keys - Credential tokens are URL-safe and bound to your user account - Other users cannot access your credential sets</p>"},{"location":"api/auth/#step-3-make-api-calls","title":"Step 3: Make API Calls","text":"<pre><code>curl -X POST \"https://netbox.example.com/api/plugins/toolkit/commands/17/execute/\" \\\n  -H \"Authorization: Token &lt;your-netbox-api-token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"device_id\": 1,\n    \"credential_token\": \"&lt;your-credential-token&gt;\"\n  }'\n</code></pre>"},{"location":"api/auth/#permissions","title":"Permissions","text":"<p>The plugin uses NetBox's ObjectPermission system with custom actions for command execution.</p>"},{"location":"api/auth/#permission-actions","title":"Permission Actions","text":"Action Description Applies To <code>view</code> View commands and logs Commands, Command Logs <code>add</code> Create new commands Commands <code>change</code> Modify existing commands Commands <code>delete</code> Delete commands Commands <code>execute_show</code> Execute show commands Commands <code>execute_config</code> Execute configuration commands Commands"},{"location":"api/auth/#setting-up-permissions","title":"Setting Up Permissions","text":""},{"location":"api/auth/#1-create-user-groups","title":"1. Create User Groups","text":"<pre><code># Example: Create groups for different access levels\nfrom django.contrib.auth.models import Group\n\n# Read-only users\nreadonly_group = Group.objects.create(name='Toolkit Read Only')\n\n# Show command executors\nshow_executors = Group.objects.create(name='Toolkit Show Commands')\n\n# Full access (show + config commands)\nfull_access = Group.objects.create(name='Toolkit Full Access')\n</code></pre>"},{"location":"api/auth/#2-create-object-permissions","title":"2. Create Object Permissions","text":"<pre><code>from users.models import ObjectPermission\nfrom django.contrib.contenttypes.models import ContentType\nfrom netbox_toolkit.models import Command\n\n# Get content type for Command model\ncommand_ct = ContentType.objects.get_for_model(Command)\n\n# Permission to execute show commands\nshow_permission = ObjectPermission.objects.create(\n    name='Execute Show Commands',\n    enabled=True,\n    object_types=[command_ct],\n    actions=['execute_show'],\n    constraints={'command_type': 'show'}  # Only show commands\n)\nshow_permission.groups.add(show_executors)\n\n# Permission to execute config commands\nconfig_permission = ObjectPermission.objects.create(\n    name='Execute Config Commands',\n    enabled=True,\n    object_types=[command_ct],\n    actions=['execute_config'],\n    constraints={'command_type': 'config'}  # Only config commands\n)\nconfig_permission.groups.add(full_access)\n</code></pre>"},{"location":"api/auth/#3-assign-users-to-groups","title":"3. Assign Users to Groups","text":"<pre><code>from django.contrib.auth.models import User\n\n# Assign user to show executors group\nuser = User.objects.get(username='john_doe')\nuser.groups.add(show_executors)\n</code></pre>"},{"location":"api/auth/#permission-constraints","title":"Permission Constraints","text":"<p>You can restrict permissions using constraints:</p>"},{"location":"api/auth/#platform-specific-permissions","title":"Platform-Specific Permissions","text":"<pre><code># Only allow execution on Cisco IOS devices\nios_permission = ObjectPermission.objects.create(\n    name='Execute on Cisco IOS Only',\n    enabled=True,\n    object_types=[command_ct],\n    actions=['execute_show'],\n    constraints={'platform__slug': 'cisco_ios'}\n)\n</code></pre>"},{"location":"api/auth/#command-specific-permissions","title":"Command-Specific Permissions","text":"<pre><code># Only allow specific commands\nversion_permission = ObjectPermission.objects.create(\n    name='Execute Version Commands Only',\n    enabled=True,\n    object_types=[command_ct],\n    actions=['execute_show'],\n    constraints={'name__icontains': 'version'}\n)\n</code></pre>"},{"location":"api/auth/#rate-limiting-bypass","title":"Rate Limiting &amp; Bypass","text":""},{"location":"api/auth/#rate-limiting-permissions","title":"Rate Limiting Permissions","text":"<p>Users and groups can bypass rate limiting through plugin configuration:</p> <pre><code># In NetBox configuration.py\nPLUGINS_CONFIG = {\n    'netbox_toolkit': {\n        'rate_limiting_enabled': True,\n        'device_command_limit': 10,\n        'time_window_minutes': 5,\n        'bypass_users': ['admin', 'automation_user'],\n        'bypass_groups': ['Toolkit Admins', 'Automation Systems'],\n    }\n}\n</code></pre>"},{"location":"api/auth/#checking-rate-limit-status","title":"Checking Rate Limit Status","text":"<p>Rate limiting information is included in permission checks and API responses.</p>"},{"location":"api/auth/#common-permission-scenarios","title":"Common Permission Scenarios","text":""},{"location":"api/auth/#scenario-1-network-operators-show-commands-only","title":"Scenario 1: Network Operators (Show Commands Only)","text":"<pre><code># Create group\noperators = Group.objects.create(name='Network Operators')\n\n# Create permission for show commands\nshow_perm = ObjectPermission.objects.create(\n    name='Network Operators - Show Commands',\n    enabled=True,\n    object_types=[command_ct],\n    actions=['view', 'execute_show'],\n    constraints={'command_type': 'show'}\n)\nshow_perm.groups.add(operators)\n</code></pre>"},{"location":"api/auth/#scenario-2-network-engineers-full-access","title":"Scenario 2: Network Engineers (Full Access)","text":"<pre><code># Create group\nengineers = Group.objects.create(name='Network Engineers')\n\n# Create permission for all commands\nfull_perm = ObjectPermission.objects.create(\n    name='Network Engineers - Full Access',\n    enabled=True,\n    object_types=[command_ct],\n    actions=['view', 'add', 'change', 'delete', 'execute_show', 'execute_config']\n)\nfull_perm.groups.add(engineers)\n</code></pre>"},{"location":"api/auth/#scenario-3-automation-systems","title":"Scenario 3: Automation Systems","text":"<pre><code># Create group with rate limit bypass\nautomation = Group.objects.create(name='Automation Systems')\n\n# Full permissions\nautomation_perm = ObjectPermission.objects.create(\n    name='Automation - Full Access',\n    enabled=True,\n    object_types=[command_ct],\n    actions=['view', 'execute_show', 'execute_config']\n)\nautomation_perm.groups.add(automation)\n\n# Add to bypass groups in configuration\nPLUGINS_CONFIG = {\n    'netbox_toolkit': {\n        'bypass_groups': ['Automation Systems'],\n    }\n}\n</code></pre>"},{"location":"api/auth/#api-permission-errors","title":"API Permission Errors","text":""},{"location":"api/auth/#common-error-responses","title":"Common Error Responses","text":""},{"location":"api/auth/#401-unauthorized","title":"401 Unauthorized","text":"<pre><code>{\n    \"detail\": \"Authentication credentials were not provided.\"\n}\n</code></pre>"},{"location":"api/auth/#403-forbidden","title":"403 Forbidden","text":"<pre><code>{\n    \"error\": \"You do not have permission to execute configuration commands\"\n}\n</code></pre>"},{"location":"api/auth/#429-too-many-requests-rate-limiting","title":"429 Too Many Requests (Rate Limiting)","text":"<pre><code>{\n    \"error\": \"Rate limit exceeded\",\n    \"details\": {\n        \"reason\": \"Rate limit exceeded: 10/10 successful commands in last 5 minutes\",\n        \"current_count\": 10,\n        \"limit\": 10,\n        \"time_window_minutes\": 5\n    }\n}\n</code></pre>"},{"location":"api/auth/#security-best-practices","title":"Security Best Practices","text":""},{"location":"api/auth/#credential-management","title":"Credential Management","text":"<ol> <li>Rotate Credentials: Regularly rotate device passwords and regenerate credential tokens</li> <li>Use Service Accounts: Create dedicated accounts for automation systems</li> <li>Secure Storage: Store credential tokens in secure secret management systems</li> <li>Least Privilege: Only grant necessary device access permissions</li> </ol>"},{"location":"api/auth/#permission-management","title":"Permission Management","text":"<ol> <li>Use Groups: Assign permissions to groups rather than individual users</li> <li>Principle of Least Privilege: Only grant necessary permissions</li> <li>Use Constraints: Restrict permissions to specific platforms or command types</li> <li>Rate Limit Bypass: Only grant to trusted automation systems</li> <li>Regular Audits: Review and audit permissions regularly</li> </ol>"},{"location":"api/auth/#api-security","title":"API Security","text":"<ol> <li>HTTPS Only: Always use HTTPS for API communications</li> <li>Token Rotation: Regularly rotate NetBox API tokens</li> <li>Monitor Usage: Review command logs for suspicious activity</li> <li>Error Handling: Don't expose sensitive information in error messages</li> </ol>"},{"location":"api/auth/#related-documentation","title":"Related Documentation","text":"<ul> <li>Setup: Installation Guide</li> <li>Usage: Commands API</li> <li>Examples: API Automation Examples</li> <li>Troubleshooting: Error Handling</li> </ul>"},{"location":"api/automation-examples/","title":"API Automation Examples","text":""},{"location":"api/automation-examples/#overview","title":"Overview","text":"<p>This document provides practical examples of automating network operations using the NetBox Toolkit Plugin API. These examples leverage capabilities not available through the web interface.</p>"},{"location":"api/automation-examples/#prerequisites","title":"Prerequisites","text":"<ul> <li>NetBox API token configured</li> <li>Device Credential Sets created with credential tokens</li> <li>Python requests library or equivalent API client</li> </ul>"},{"location":"api/automation-examples/#authentication-setup","title":"Authentication Setup","text":"<pre><code>import requests\n\n# Configuration\nBASE_URL = \"https://netbox.example.com\"\nAPI_TOKEN = \"your-netbox-api-token\"\nCREDENTIAL_TOKEN = \"your-credential-token\"  # From Device Credential Set\n\nheaders = {\n    \"Authorization\": f\"Token {API_TOKEN}\",\n    \"Content-Type\": \"application/json\"\n}\n</code></pre>"},{"location":"api/automation-examples/#network-monitoring-automation","title":"Network Monitoring Automation","text":""},{"location":"api/automation-examples/#automated-interface-monitoring","title":"Automated Interface Monitoring","text":"<p>Use Case: Monitor interface status across all network devices every hour</p> <pre><code>#!/usr/bin/env python3\n\"\"\"Automated interface status monitoring\"\"\"\n\nimport requests\nfrom datetime import datetime\n\ndef monitor_interfaces():\n    # Get all active network devices\n    devices_response = requests.get(\n        f\"{BASE_URL}/api/dcim/devices/\",\n        params={\"status\": \"active\"},\n        headers=headers\n    )\n    devices = devices_response.json()[\"results\"]\n\n    # Get interface monitoring command\n    commands_response = requests.get(\n        f\"{BASE_URL}/api/plugins/toolkit/commands/\",\n        params={\"name__icontains\": \"interface status\"},\n        headers=headers\n    )\n\n    if not commands_response.json()[\"results\"]:\n        print(\"No interface status command found\")\n        return\n\n    command_id = commands_response.json()[\"results\"][0][\"id\"]\n\n    # Execute on all devices\n    executions = []\n    for device in devices:\n        executions.append({\n            \"command_id\": command_id,\n            \"device_id\": device[\"id\"],\n            \"credential_token\": CREDENTIAL_TOKEN\n        })\n\n    # Bulk execution\n    bulk_response = requests.post(\n        f\"{BASE_URL}/api/plugins/toolkit/commands/bulk-execute/\",\n        json={\"executions\": executions},\n        headers=headers\n    )\n\n    results = bulk_response.json()\n    print(f\"Monitoring complete: {results['summary']}\")\n\n    # Process failed executions\n    for i, result in enumerate(results[\"results\"]):\n        if not result[\"success\"]:\n            device_name = devices[i][\"name\"]\n            print(f\"Failed on {device_name}: {result.get('error', 'Unknown error')}\")\n\n    return results\n\nif __name__ == \"__main__\":\n    results = monitor_interfaces()\n</code></pre>"},{"location":"api/automation-examples/#device-health-monitoring","title":"Device Health Monitoring","text":"<p>Use Case: Collect system health metrics for monitoring systems</p> <pre><code>def collect_health_metrics():\n    \"\"\"Collect performance metrics for monitoring systems\"\"\"\n\n    health_commands = [\n        {\"name\": \"show version\", \"metric\": \"system_info\"},\n        {\"name\": \"show memory\", \"metric\": \"memory_usage\"},\n        {\"name\": \"show cpu\", \"metric\": \"cpu_usage\"},\n        {\"name\": \"show environment\", \"metric\": \"environmental\"}\n    ]\n\n    # Get devices by role (e.g., core switches)\n    devices_response = requests.get(\n        f\"{BASE_URL}/api/dcim/devices/\",\n        params={\"role\": \"core-switch\", \"status\": \"active\"},\n        headers=headers\n    )\n    devices = devices_response.json()[\"results\"]\n\n    metrics = {}\n\n    for command_info in health_commands:\n        # Find command\n        cmd_response = requests.get(\n            f\"{BASE_URL}/api/plugins/toolkit/commands/\",\n            params={\"name__icontains\": command_info[\"name\"]},\n            headers=headers\n        )\n\n        if not cmd_response.json()[\"results\"]:\n            continue\n\n        command_id = cmd_response.json()[\"results\"][0][\"id\"]\n\n        # Execute on all core devices\n        executions = [{\n            \"command_id\": command_id,\n            \"device_id\": device[\"id\"],\n            \"credential_token\": CREDENTIAL_TOKEN\n        } for device in devices]\n\n        result = requests.post(\n            f\"{BASE_URL}/api/plugins/toolkit/commands/bulk-execute/\",\n            json={\"executions\": executions},\n            headers=headers\n        )\n\n        metrics[command_info[\"metric\"]] = result.json()\n\n    return metrics\n</code></pre>"},{"location":"api/automation-examples/#configuration-management","title":"Configuration Management","text":""},{"location":"api/automation-examples/#vlan-deployment","title":"VLAN Deployment","text":"<p>Use Case: Deploy VLAN configurations to switch groups</p> <pre><code>def deploy_vlan_config(vlan_id, switch_group, description):\n    \"\"\"Deploy VLAN configuration to a group of switches\"\"\"\n\n    # Get switches in the specified group\n    devices_response = requests.get(\n        f\"{BASE_URL}/api/dcim/devices/\",\n        params={\"device_role__slug\": switch_group, \"status\": \"active\"},\n        headers=headers\n    )\n    devices = devices_response.json()[\"results\"]\n\n    # Get VLAN creation command\n    commands_response = requests.get(\n        f\"{BASE_URL}/api/plugins/toolkit/commands/\",\n        params={\"name\": \"Create VLAN\"},\n        headers=headers\n    )\n\n    if not commands_response.json()[\"results\"]:\n        raise Exception(\"VLAN creation command not found\")\n\n    command_id = commands_response.json()[\"results\"][0][\"id\"]\n\n    # Execute with enhanced validation (validation happens automatically in execute endpoint)\n    # Variables will be validated as part of the execution process\n\n    # Execute on all switches in group\n    executions = []\n    for device in devices:\n        executions.append({\n            \"command_id\": command_id,\n            \"device_id\": device[\"id\"],\n            \"credential_token\": CREDENTIAL_TOKEN,\n            \"variables\": {\n                \"vlan_id\": str(vlan_id),\n                \"vlan_name\": description\n            }\n        })\n\n    # Deploy configuration\n    deployment = requests.post(\n        f\"{BASE_URL}/api/plugins/toolkit/commands/bulk-execute/\",\n        json={\"executions\": executions},\n        headers=headers\n    )\n\n    result = deployment.json()\n\n    # Check for failures\n    if result[\"summary\"][\"failed\"] &gt; 0:\n        print(f\"Deployment had {result['summary']['failed']} failures!\")\n        for i, exec_result in enumerate(result[\"results\"]):\n            if not exec_result[\"success\"]:\n                device_name = devices[i][\"name\"]\n                print(f\"Failed on {device_name}: {exec_result.get('error', 'Unknown error')}\")\n\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    result = deploy_vlan_config(\n        vlan_id=100,\n        switch_group=\"access-switch\",\n        description=\"Guest Network\"\n    )\n\n    print(f\"Deployment completed: {result['summary']['successful']} successful, {result['summary']['failed']} failed\")\n</code></pre>"},{"location":"api/automation-examples/#configuration-backup","title":"Configuration Backup","text":"<p>Use Case: Automated configuration backup for all devices</p> <pre><code>def backup_configurations():\n    \"\"\"Backup running configurations for all devices\"\"\"\n\n    # Get all managed devices\n    devices_response = requests.get(\n        f\"{BASE_URL}/api/dcim/devices/\",\n        params={\"status\": \"active\", \"limit\": 1000},\n        headers=headers\n    )\n    devices = devices_response.json()[\"results\"]\n\n    # Get show running-config command\n    commands_response = requests.get(\n        f\"{BASE_URL}/api/plugins/toolkit/commands/\",\n        params={\"command__icontains\": \"show running-config\"},\n        headers=headers\n    )\n\n    backups = {}\n\n    for command in commands_response.json()[\"results\"]:\n        # Get devices that match this command's platforms\n        compatible_devices = [d for d in devices\n                            if d.get(\"platform\") and\n                            any(p[\"id\"] == d[\"platform\"][\"id\"]\n                                for p in command[\"platforms\"])]\n\n        if not compatible_devices:\n            continue\n\n        # Execute backup command\n        executions = [{\n            \"command_id\": command[\"id\"],\n            \"device_id\": device[\"id\"],\n            \"credential_token\": CREDENTIAL_TOKEN\n        } for device in compatible_devices]\n\n        result = requests.post(\n            f\"{BASE_URL}/api/plugins/toolkit/commands/bulk-execute/\",\n            json={\"executions\": executions},\n            headers=headers\n        )\n\n        # Store successful backups\n        for i, exec_result in enumerate(result.json()[\"results\"]):\n            if exec_result[\"success\"]:\n                device_name = compatible_devices[i][\"name\"]\n                backups[device_name] = {\n                    \"timestamp\": datetime.now().isoformat(),\n                    \"config\": exec_result[\"output\"]\n                }\n\n    return backups\n</code></pre>"},{"location":"api/automation-examples/#compliance-and-auditing","title":"Compliance and Auditing","text":""},{"location":"api/automation-examples/#security-configuration-audit","title":"Security Configuration Audit","text":"<p>Use Case: Automated compliance checking across network infrastructure</p> <pre><code>def security_compliance_audit():\n    \"\"\"Run comprehensive security compliance checks\"\"\"\n\n    compliance_checks = [\n        {\"command_name\": \"show ntp status\", \"check\": \"ntp_config\"},\n        {\"command_name\": \"show snmp community\", \"check\": \"snmp_security\"},\n        {\"command_name\": \"show aaa servers\", \"check\": \"aaa_config\"}\n    ]\n\n    # Get all devices\n    devices_response = requests.get(\n        f\"{BASE_URL}/api/dcim/devices/\",\n        params={\"status\": \"active\"},\n        headers=headers\n    )\n    devices = devices_response.json()[\"results\"]\n\n    compliance_results = {\n        \"summary\": {\"total_devices\": len(devices), \"compliant\": 0, \"non_compliant\": 0},\n        \"device_results\": {},\n        \"violations\": []\n    }\n\n    for check in compliance_checks:\n        # Find command\n        cmd_response = requests.get(\n            f\"{BASE_URL}/api/plugins/toolkit/commands/\",\n            params={\"name__icontains\": check[\"command_name\"]},\n            headers=headers\n        )\n\n        if not cmd_response.json()[\"results\"]:\n            continue\n\n        command_id = cmd_response.json()[\"results\"][0][\"id\"]\n\n        # Execute compliance check\n        executions = [{\n            \"command_id\": command_id,\n            \"device_id\": device[\"id\"],\n            \"credential_token\": CREDENTIAL_TOKEN\n        } for device in devices]\n\n        result = requests.post(\n            f\"{BASE_URL}/api/plugins/toolkit/commands/bulk-execute/\",\n            json={\"executions\": executions},\n            headers=headers\n        )\n\n        # Analyze results (simplified - would need actual compliance logic)\n        for i, exec_result in enumerate(result.json()[\"results\"]):\n            device_name = devices[i][\"name\"]\n\n            if device_name not in compliance_results[\"device_results\"]:\n                compliance_results[\"device_results\"][device_name] = {\"checks\": {}}\n\n            if exec_result[\"success\"]:\n                # Analyze output for compliance (implementation specific)\n                is_compliant = analyze_compliance_output(\n                    exec_result[\"output\"],\n                    check[\"check\"]\n                )\n                compliance_results[\"device_results\"][device_name][\"checks\"][check[\"check\"]] = is_compliant\n\n                if not is_compliant:\n                    compliance_results[\"violations\"].append({\n                        \"device\": device_name,\n                        \"check\": check[\"check\"],\n                        \"output\": exec_result[\"output\"][:200]  # Truncated\n                    })\n\n    return compliance_results\n\ndef analyze_compliance_output(output, check_type):\n    \"\"\"Analyze command output for compliance (simplified)\"\"\"\n    # This would contain actual compliance checking logic\n    # For demonstration purposes, always return True\n    return True\n</code></pre>"},{"location":"api/automation-examples/#error-handling-best-practices","title":"Error Handling Best Practices","text":""},{"location":"api/automation-examples/#robust-execution-with-retry-logic","title":"Robust Execution with Retry Logic","text":"<pre><code>import time\nfrom functools import wraps\n\ndef retry_with_backoff(max_retries=3, backoff_factor=2):\n    \"\"\"Decorator for API calls with exponential backoff\"\"\"\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_retries):\n                try:\n                    return func(*args, **kwargs)\n                except requests.exceptions.HTTPError as e:\n                    if e.response.status_code == 429:  # Rate limited\n                        if attempt &lt; max_retries - 1:\n                            wait_time = backoff_factor * (2 ** attempt)\n                            print(f\"Rate limited, waiting {wait_time} seconds...\")\n                            time.sleep(wait_time)\n                            continue\n                    raise\n            return None\n        return wrapper\n    return decorator\n\n@retry_with_backoff(max_retries=3, backoff_factor=1)\ndef execute_command_with_retry(command_id, device_id):\n    \"\"\"Execute command with automatic retry on rate limits\"\"\"\n    response = requests.post(\n        f\"{BASE_URL}/api/plugins/toolkit/commands/{command_id}/execute/\",\n        headers=headers,\n        json={\n            \"device_id\": device_id,\n            \"credential_token\": CREDENTIAL_TOKEN\n        }\n    )\n    response.raise_for_status()\n    return response.json()\n</code></pre>"},{"location":"api/automation-examples/#integration-examples","title":"Integration Examples","text":""},{"location":"api/automation-examples/#ansible-playbook-integration","title":"Ansible Playbook Integration","text":"<pre><code>---\n- name: NetBox Toolkit Command Execution\n  hosts: localhost\n  vars:\n    netbox_url: \"{{ netbox_base_url }}\"\n    netbox_token: \"{{ vault_netbox_token }}\"\n    credential_token: \"{{ vault_credential_token }}\"\n\n  tasks:\n    - name: Execute interface status check\n      uri:\n        url: \"{{ netbox_url }}/api/plugins/toolkit/commands/1/execute/\"\n        method: POST\n        headers:\n          Authorization: \"Token {{ netbox_token }}\"\n          Content-Type: \"application/json\"\n        body_format: json\n        body:\n          device_id: \"{{ device_id }}\"\n          credential_token: \"{{ credential_token }}\"\n          variables:\n            interface_name: \"{{ interface_name }}\"\n        status_code: 200\n      register: command_result\n\n    - name: Display results\n      debug:\n        msg: \"Command execution {{ 'successful' if command_result.json.success else 'failed' }}\"\n\n    - name: Show command output\n      debug:\n        var: command_result.json.output\n      when: command_result.json.success\n</code></pre>"},{"location":"api/automation-examples/#related-documentation","title":"Related Documentation","text":"<ul> <li>Setup: Authentication Guide</li> <li>Reference: Commands API</li> <li>Authentication: Authentication &amp; Permissions</li> <li>Troubleshooting: Error Handling</li> </ul>"},{"location":"api/command-logs/","title":"Command Logs API","text":"<p>The Command Logs API provides access to command execution history, statistics, and export capabilities. This API offers enhanced analytics capabilities not available in the web interface, making it ideal for monitoring, reporting, and operational insights.</p>"},{"location":"api/command-logs/#api-exclusive-features","title":"API-Exclusive Features","text":"<p>\ud83d\udcca Advanced Statistics: Comprehensive execution analytics including success rates, trending, and performance metrics \ud83d\udcc8 Operational Insights: Identify top commands, common errors, and usage patterns \ud83d\udcc5 Flexible Export: Advanced export options with date filtering and multiple formats</p> <p>All web interface functionality is also fully supported via API for complete feature parity.</p>"},{"location":"api/command-logs/#endpoints-overview","title":"Endpoints Overview","text":"Method Endpoint Description GET <code>/command-logs/</code> List all command logs GET <code>/command-logs/{id}/</code> Retrieve a specific log GET <code>/command-logs/statistics/</code> Get execution statistics GET <code>/command-logs/export/</code> Export logs (CSV/JSON) <p>Note</p> <p>Command logs are created automatically when commands are executed. Manual creation via POST is generally not needed.</p>"},{"location":"api/command-logs/#command-log-object","title":"Command Log Object","text":"<pre><code>{\n    \"id\": 456,\n    \"url\": \"/api/plugins/toolkit/command-logs/456/\",\n    \"display\": \"Show Version on switch01 - 2025-06-13 10:30:45\",\n    \"command\": {\n        \"id\": 1,\n        \"name\": \"Show Version\",\n        \"command_type\": \"show\",\n        \"url\": \"/api/plugins/toolkit/commands/1/\"\n    },\n    \"device\": {\n        \"id\": 123,\n        \"name\": \"switch01\",\n        \"url\": \"/api/dcim/devices/123/\"\n    },\n    \"output\": \"Cisco IOS Software, Version 15.1(4)M12a...\",\n    \"username\": \"admin\",\n    \"execution_time\": \"2025-06-13T10:30:45.123Z\",\n    \"success\": true,\n    \"error_message\": null,\n    \"execution_duration\": 1.23,\n    \"parsed_data\": {\n        \"version\": \"15.1(4)M12a\",\n        \"hostname\": \"switch01\",\n        \"uptime\": \"1 year, 23 weeks, 4 days\"\n    },\n    \"parsing_success\": true,\n    \"parsing_template\": \"cisco_ios_show_version.textfsm\",\n    \"created\": \"2025-06-13T10:30:45.123Z\",\n    \"last_updated\": \"2025-06-13T10:30:45.123Z\"\n}\n</code></pre>"},{"location":"api/command-logs/#statistics","title":"Statistics","text":"<p>API-Exclusive Feature: Get comprehensive statistics about command executions for operational insights and monitoring.</p>"},{"location":"api/command-logs/#use-cases","title":"Use Cases","text":"<ul> <li>Performance Monitoring: Track success rates and identify problematic commands</li> <li>Usage Analytics: Understand which commands are used most frequently</li> <li>Error Analysis: Identify common failure patterns and troubleshoot issues</li> <li>Capacity Planning: Monitor execution volumes and trends over time</li> </ul> <p>Get comprehensive statistics about command executions:</p> <pre><code>GET /api/plugins/toolkit/command-logs/statistics/\n</code></pre> <p>Response: <pre><code>{\n    \"total_logs\": 1000,\n    \"success_rate\": 85.5,\n    \"last_24h\": {\n        \"total\": 50,\n        \"successful\": 45,\n        \"failed\": 5\n    },\n    \"top_commands\": [\n        {\n            \"command_name\": \"show interfaces\",\n            \"count\": 150\n        },\n        {\n            \"command_name\": \"show version\",\n            \"count\": 120\n        }\n    ],\n    \"common_errors\": [\n        {\n            \"error\": \"Connection timeout\",\n            \"count\": 10\n        },\n        {\n            \"error\": \"Invalid command\",\n            \"count\": 5\n        }\n    ]\n}\n</code></pre></p>"},{"location":"api/command-logs/#export","title":"Export","text":"<p>Export command logs in CSV or JSON format:</p> <pre><code>GET /api/plugins/toolkit/command-logs/export/?format=csv&amp;start_date=2025-06-01&amp;end_date=2025-06-30\n</code></pre>"},{"location":"api/command-logs/#export-parameters","title":"Export Parameters","text":"Parameter Description Example <code>format</code> Export format (csv/json) <code>format=csv</code> <code>start_date</code> Start date filter (YYYY-MM-DD) <code>start_date=2025-06-01</code> <code>end_date</code> End date filter (YYYY-MM-DD) <code>end_date=2025-06-30</code> <p>Export Limits</p> <p>Exports are limited to 10,000 records for performance. Use date filters to reduce result size.</p>"},{"location":"api/command-logs/#filtering-command-logs","title":"Filtering Command Logs","text":"Filter Description Example <code>command</code> Command ID <code>?command=1</code> <code>device</code> Device ID <code>?device=123</code> <code>username</code> Exact username <code>?username=admin</code> <code>username__icontains</code> Username contains <code>?username__icontains=adm</code> <code>success</code> Execution success <code>?success=true</code> <code>parsing_success</code> Parsing success <code>?parsing_success=true</code> <code>has_parsed_data</code> Has parsed data <code>?has_parsed_data=true</code> <code>execution_time__gte</code> Executed after <code>?execution_time__gte=2025-06-01</code> <code>execution_time__lte</code> Executed before <code>?execution_time__lte=2025-06-30</code> <code>device__name__icontains</code> Device name contains <code>?device__name__icontains=switch</code> <code>command__name__icontains</code> Command name contains <code>?command__name__icontains=version</code>"},{"location":"api/command-logs/#examples","title":"Examples","text":""},{"location":"api/command-logs/#get-recent-failed-executions","title":"Get recent failed executions","text":"<pre><code>GET /api/plugins/toolkit/command-logs/?success=false&amp;execution_time__gte=2025-06-01\n</code></pre>"},{"location":"api/command-logs/#get-logs-for-a-specific-device","title":"Get logs for a specific device","text":"<pre><code>GET /api/plugins/toolkit/command-logs/?device=123&amp;ordering=-execution_time\n</code></pre>"},{"location":"api/command-logs/#export-last-months-logs-as-csv","title":"Export last month's logs as CSV","text":"<pre><code>GET /api/plugins/toolkit/command-logs/export/?format=csv&amp;start_date=2025-05-01&amp;end_date=2025-05-31\n</code></pre>"},{"location":"api/command-logs/#get-logs-with-parsing-failures","title":"Get logs with parsing failures","text":"<pre><code>GET /api/plugins/toolkit/command-logs/?parsing_success=false&amp;success=true\n</code></pre>"},{"location":"api/command-logs/#search-for-specific-error-messages","title":"Search for specific error messages","text":"<pre><code>GET /api/plugins/toolkit/command-logs/?success=false&amp;search=timeout\n</code></pre>"},{"location":"api/commands/","title":"Commands API","text":""},{"location":"api/commands/#overview","title":"Overview","text":"<p>The Commands API enables automated execution of network commands on devices with full support for variables, bulk operations, and integration workflows. This API provides capabilities beyond the web interface for automation and system integration.</p>"},{"location":"api/commands/#key-capabilities","title":"Key Capabilities","text":"<p>API-Exclusive Features:</p> <ul> <li>\ud83d\ude80 Bulk Execution: Execute multiple commands across multiple devices in a single API call</li> <li>\ud83d\udd0d Variable Discovery: Programmatically retrieve available NetBox data choices for any device</li> <li>\u2705 Enhanced Validation: Comprehensive variable validation integrated with command execution</li> <li>\ud83d\udcca Advanced Integration: Perfect for automation workflows, CI/CD pipelines, and third-party integrations</li> </ul> <p>Full Feature Parity: All web interface functionality is supported via API for complete automation capability.</p>"},{"location":"api/commands/#authentication-credentials","title":"Authentication &amp; Credentials","text":"<p>The Commands API uses NetBox authentication with credential tokens for enhanced security:</p> <ol> <li>NetBox API Token: Standard NetBox authentication (sent in <code>Authorization</code> header)</li> <li>Credential Token: References stored device credentials (sent in request body)</li> </ol>"},{"location":"api/commands/#why-two-tokens","title":"Why Two Tokens?","text":"<ul> <li>Security: Device credentials are never transmitted in API calls</li> <li>User Isolation: Users can only use their own stored credential sets</li> <li>Audit Trail: All actions are properly logged to user accounts</li> <li>Flexibility: Multiple credential sets can be managed per user</li> </ul>"},{"location":"api/commands/#setting-up-credentials","title":"Setting Up Credentials","text":"<ol> <li>Create a Device Credential Set in the NetBox web interface</li> <li>Store your device username/password (encrypted automatically)</li> <li>Copy the generated credential token for API use</li> <li>Use both your NetBox API token and credential token in API calls</li> </ol>"},{"location":"api/commands/#example-api-call","title":"Example API Call","text":"<pre><code>curl -X POST \"https://netbox.example.com/api/plugins/toolkit/commands/17/execute/\" \\\n  -H \"Authorization: Token &lt;your-netbox-api-token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"device_id\": 1,\n    \"credential_token\": \"&lt;your-credential-token&gt;\"\n  }'\n</code></pre>"},{"location":"api/commands/#endpoints-overview","title":"Endpoints Overview","text":"Method Endpoint Description GET <code>/commands/</code> List all commands POST <code>/commands/</code> Create a new command GET <code>/commands/{id}/</code> Retrieve a specific command PUT <code>/commands/{id}/</code> Update a command PATCH <code>/commands/{id}/</code> Partially update a command DELETE <code>/commands/{id}/</code> Delete a command POST <code>/commands/{id}/execute/</code> Execute a command GET <code>/commands/{id}/variable-choices/</code> Get variable choices for a device POST <code>/commands/bulk-execute/</code> Execute multiple commands"},{"location":"api/commands/#command-variables","title":"Command Variables","text":"<p>Commands can include variables that are dynamically replaced with values during execution. Variables are defined using angle bracket syntax: <code>&lt;variable_name&gt;</code>.</p>"},{"location":"api/commands/#variable-types","title":"Variable Types","text":"Type Description Example Value Validation <code>text</code> Free text input <code>\"any text\"</code> None <code>netbox_interface</code> Device interface <code>\"GigabitEthernet0/1\"</code> Must exist on device <code>netbox_vlan</code> VLAN ID <code>\"100\"</code> Must exist on device/site <code>netbox_ip</code> IP address <code>\"192.168.1.1\"</code> Must be assigned to device"},{"location":"api/commands/#example-command-with-variables","title":"Example Command with Variables","text":"<pre><code>{\n    \"name\": \"Show Interface Status\",\n    \"command\": \"show interface &lt;interface_name&gt; status\",\n    \"platforms\": [1],\n    \"command_type\": \"show\",\n    \"description\": \"Display status of a specific interface\",\n    \"variables\": [\n        {\n            \"name\": \"interface_name\",\n            \"display_name\": \"Interface Name\",\n            \"variable_type\": \"netbox_interface\",\n            \"required\": true,\n            \"help_text\": \"Select the interface to check\"\n        }\n    ]\n}\n</code></pre>"},{"location":"api/commands/#working-with-variables","title":"Working with Variables","text":""},{"location":"api/commands/#1-discovery-get-available-variable-choices","title":"1. Discovery: Get Available Variable Choices","text":"<p>Before executing a command with variables, discover what values are available for the target device:</p> <pre><code>GET /api/plugins/toolkit/commands/{id}/variable-choices/?device_id={device_id}\n</code></pre> <p>Example Request: <pre><code>GET /api/plugins/toolkit/commands/1/variable-choices/?device_id=123\n</code></pre></p> <p>Response: <pre><code>{\n    \"device_id\": 123,\n    \"device_name\": \"switch01.example.com\",\n    \"command_id\": 1,\n    \"command_name\": \"Show Interface Status\",\n    \"variables\": {\n        \"interface_name\": {\n            \"type\": \"netbox_interface\",\n            \"choices\": [\n                {\n                    \"value\": \"GigabitEthernet0/1\",\n                    \"display\": \"GigabitEthernet0/1 (1000base-t)\",\n                    \"id\": 456,\n                    \"enabled\": true\n                },\n                {\n                    \"value\": \"GigabitEthernet0/2\",\n                    \"display\": \"GigabitEthernet0/2 (1000base-t)\",\n                    \"id\": 457,\n                    \"enabled\": false\n                }\n            ],\n            \"help_text\": \"Select the interface to check\",\n            \"default_value\": \"\"\n        }\n    }\n}\n</code></pre></p>"},{"location":"api/commands/#understanding-variable-validation-types","title":"Understanding Variable Validation Types","text":"<p>The API provides comprehensive variable validation integrated with command execution:</p>"},{"location":"api/commands/#enhanced-validation-execute","title":"Enhanced Validation (<code>/execute/</code>)","text":"<p>What it validates: - \u2705 Variable definitions exist for command - \u2705 Required variables have values - \u2705 Variable substitution syntax is correct - \u2705 Interface/VLAN/IP existence on target device - \u2705 User permissions for device/command - \u2705 Credential validity</p> <p>Use case: Complete validation and command execution in one step</p>"},{"location":"api/commands/#discovery-variable-choices","title":"Discovery (<code>/variable-choices/</code>)","text":"<p>What it provides: - \u2705 Available interfaces for a device - \u2705 Available VLANs for a device/site - \u2705 Available IP addresses for a device - \u2705 Variable metadata and help text</p> <p>Use case: Building dynamic forms or validating against real data</p>"},{"location":"api/commands/#variable-workflow","title":"Variable Workflow","text":"<p>Here's how the endpoints work together for variable commands:</p> <pre><code>graph TD\n    A[Start with Command] --&gt; B[/variable-choices/?device_id=X]\n    B --&gt; C[Get available interfaces/VLANs/IPs]\n    C --&gt; D[Present choices to user]\n    D --&gt; E[User selects values]\n    E --&gt; F[/execute/]\n    F --&gt; G{Validation and execution successful?}\n    G --&gt;|Yes| H[Command executed successfully]\n    G --&gt;|No| I[Show validation/execution errors]\n    I --&gt; B\n</code></pre>"},{"location":"api/commands/#recommended-workflow","title":"Recommended Workflow","text":"<ol> <li>Discovery Phase: Use <code>/variable-choices/</code> to get valid options for a device</li> <li>Selection Phase: Present options to user and collect their selections</li> <li>Execution Phase: Use <code>/execute/</code> for comprehensive validation and command execution</li> <li>Error Handling: The <code>/execute/</code> endpoint provides detailed error messages for both validation and execution issues</li> </ol>"},{"location":"api/commands/#4-execution-run-command-with-variables","title":"4. Execution: Run Command with Variables","text":"<p>Execute a command with validated variables:</p> <pre><code>POST /api/plugins/toolkit/commands/{id}/execute/\n</code></pre> <p>Request: <pre><code>{\n    \"device_id\": 123,\n    \"credential_token\": \"HsAo6NEoNcWYaE0hi_B9PqC6NcV-IZgwbLgDw_rR1I_1awHhUQMhhWrMMPIZjVvBrIi8fXDAmQfx8BXJoF1LNg\",\n    \"variables\": {\n        \"interface_name\": \"GigabitEthernet0/1\"\n    },\n    \"timeout\": 30\n}\n</code></pre></p> <p>Response: <pre><code>{\n    \"success\": true,\n    \"output\": \"GigabitEthernet0/1 is up, line protocol is up...\",\n    \"error_message\": null,\n    \"execution_time\": 0.9740488529205322,\n    \"command\": {\n        \"id\": 1,\n        \"name\": \"Show Interface Status\",\n        \"command_type\": \"show\"\n    },\n    \"device\": {\n        \"id\": 123,\n        \"name\": \"switch01\"\n    },\n    \"credential_set\": {\n        \"id\": 8,\n        \"name\": \"Network Admin Credentials\"\n    },\n    \"variables\": {\n        \"interface_name\": \"GigabitEthernet0/1\"\n    },\n    \"syntax_error\": {\n        \"detected\": false\n    },\n    \"parsed_output\": {\n        \"success\": true,\n        \"method\": \"textfsm\",\n        \"data\": [\n            {\n                \"interface\": \"GigabitEthernet0/1\",\n                \"status\": \"up\",\n                \"protocol\": \"up\"\n            }\n        ]\n    }\n}\n}\n</code></pre></p>"},{"location":"api/commands/#variable-workflow-example","title":"Variable Workflow Example","text":"<p>Here's a complete workflow for working with variable commands via API:</p> <pre><code>import requests\n\n# Configuration\nBASE_URL = \"https://netbox.example.com\"\nAPI_TOKEN = \"your-netbox-api-token\"\nCREDENTIAL_TOKEN = \"your-credential-token\"  # From Device Credential Set\n\nheaders = {\n    \"Authorization\": f\"Token {API_TOKEN}\",\n    \"Content-Type\": \"application/json\"\n}\n\n# 1. Get command information including variables\ncommand = requests.get(f\"{BASE_URL}/api/plugins/toolkit/commands/1/\", headers=headers).json()\nprint(f\"Command: {command['name']}\")\nprint(f\"Variables: {[v['name'] for v in command['variables']]}\")\n\n# 2. Get available choices for the target device\nchoices = requests.get(\n    f\"{BASE_URL}/api/plugins/toolkit/commands/1/variable-choices/?device_id=123\",\n    headers=headers\n).json()\n\n# 3. Present choices to user and collect input\ninterface_choices = choices['variables']['interface_name']['choices']\nprint(\"Available interfaces:\")\nfor choice in interface_choices:\n    print(f\"  {choice['value']} - {choice['display']}\")\n\nselected_interface = \"GigabitEthernet0/1\"  # User selection\n\n# 4. Execute with enhanced validation (includes all validation checks)\nresult = requests.post(\n    f\"{BASE_URL}/api/plugins/toolkit/commands/1/execute/\",\n    headers=headers,\n    json={\n        \"device_id\": 123,\n        \"credential_token\": CREDENTIAL_TOKEN,\n        \"variables\": {\"interface_name\": selected_interface}\n    }\n)\n\nif result.json()[\"success\"]:\n    print(f\"Execution successful: {result.json()['output']}\")\nelse:\n    print(f\"Execution failed: {result.json()['error_message']}\")\n</code></pre>"},{"location":"api/commands/#creating-commands","title":"Creating Commands","text":""},{"location":"api/commands/#basic-command-creation","title":"Basic Command Creation","text":"<pre><code>POST /api/plugins/toolkit/commands/\n</code></pre> <pre><code>{\n    \"name\": \"Show Interfaces\",\n    \"command\": \"show ip interface brief\",\n    \"platforms\": [1],\n    \"command_type\": \"show\",\n    \"description\": \"Display interface status summary\"\n}\n</code></pre>"},{"location":"api/commands/#command-with-variables","title":"Command with Variables","text":"<p>When creating commands with variables, the variables are managed separately through the admin interface or forms. The API response will include variable definitions:</p> <pre><code>{\n    \"id\": 1,\n    \"name\": \"Show Interface Config\",\n    \"command\": \"show running-config interface &lt;interface_name&gt;\",\n    \"platforms\": [1],\n    \"command_type\": \"show\",\n    \"description\": \"Show configuration for a specific interface\",\n    \"variables\": [\n        {\n            \"id\": 1,\n            \"name\": \"interface_name\",\n            \"display_name\": \"Interface Name\",\n            \"variable_type\": \"netbox_interface\",\n            \"required\": true,\n            \"help_text\": \"Select the interface to configure\",\n            \"default_value\": \"\"\n        }\n    ]\n}\n</code></pre>"},{"location":"api/commands/#command-types","title":"Command Types","text":"<ul> <li><code>show</code>: Read-only commands that display information</li> <li><code>config</code>: Configuration commands that modify device state</li> </ul>"},{"location":"api/commands/#bulk-command-execution","title":"Bulk Command Execution","text":"<p>API-Exclusive Feature: Execute multiple commands across multiple devices with variable support. This powerful capability enables automation scenarios not possible through the web interface.</p>"},{"location":"api/commands/#use-cases","title":"Use Cases","text":"<ul> <li>Network-wide Configuration: Deploy configuration changes across multiple devices</li> <li>Mass Data Collection: Gather information from entire device groups</li> <li>Automated Auditing: Run compliance checks across your infrastructure</li> <li>Orchestrated Workflows: Execute complex multi-device operations</li> </ul> <p>Execute multiple commands across multiple devices with variable support:</p> <pre><code>POST /api/plugins/toolkit/commands/bulk-execute/\n</code></pre> <p>Request Format: <pre><code>{\n    \"executions\": [\n        {\n            \"command_id\": 1,\n            \"device_id\": 123,\n            \"credential_token\": \"HsAo6NEoNcWYaE0hi_B9PqC6NcV-IZgwbLgDw_rR1I_1awHhUQMhhWrMMPIZjVvBrIi8fXDAmQfx8BXJoF1LNg\",\n            \"variables\": {\n                \"interface_name\": \"GigabitEthernet0/1\"\n            }\n        },\n        {\n            \"command_id\": 2,\n            \"device_id\": 124,\n            \"credential_token\": \"HsAo6NEoNcWYaE0hi_B9PqC6NcV-IZgwbLgDw_rR1I_1awHhUQMhhWrMMPIZjVvBrIi8fXDAmQfx8BXJoF1LNg\",\n            \"variables\": {\n                \"vlan_id\": \"100\"\n            }\n        }\n    ]\n}\n</code></pre></p> <p>Response: <pre><code>{\n    \"results\": [\n        {\n            \"execution_id\": 1,\n            \"success\": true,\n            \"command_log_id\": 456,\n            \"execution_time\": 1.23\n        },\n        {\n            \"execution_id\": 2,\n            \"success\": false,\n            \"error\": \"Variable validation failed\",\n            \"details\": {\n                \"variables\": {\n                    \"vlan_id\": \"VLAN 100 not found for device 'router01' or its site\"\n                }\n            }\n        }\n    ],\n    \"summary\": {\n        \"total\": 2,\n        \"successful\": 1,\n        \"failed\": 1\n    }\n}\n</code></pre></p>"},{"location":"api/commands/#filtering-commands","title":"Filtering Commands","text":"Filter Description Example <code>name</code> Exact name match <code>?name=Show%20Version</code> <code>name__icontains</code> Name contains (case-insensitive) <code>?name__icontains=version</code> <code>platforms</code> Platform ID <code>?platforms=1</code> <code>platforms__slug</code> Platform slug <code>?platforms__slug=cisco_ios</code> <code>command_type</code> Command type <code>?command_type=show</code> <code>description__icontains</code> Description contains <code>?description__icontains=interface</code>"},{"location":"api/commands/#error-handling","title":"Error Handling","text":""},{"location":"api/commands/#variable-validation-errors","title":"Variable Validation Errors","text":""},{"location":"api/commands/#execute-and-variable-choices-errors-device-specific","title":"<code>/execute/</code> and <code>/variable-choices/</code> Errors (Device-Specific)","text":"<pre><code>{\n    \"variables\": {\n        \"interface_name\": \"Interface 'FastEthernet0/99' not found on device 'switch01'. Available interfaces: GigabitEthernet0/1, GigabitEthernet0/2, ...\"\n    }\n}\n</code></pre> <pre><code>{\n    \"variables\": {\n        \"vlan_id\": \"VLAN 999 not found for device 'switch01' or its site\"\n    }\n}\n</code></pre>"},{"location":"api/commands/#common-errors-by-type","title":"Common Errors by Type","text":""},{"location":"api/commands/#device-context-errors-execute-variable-choices","title":"Device Context Errors (<code>/execute/</code>, <code>/variable-choices/</code>)","text":"Error Cause Solution <code>Device with ID X not found</code> Invalid device_id Verify device exists in NetBox <code>Interface 'X' not found on device</code> Interface doesn't exist Use <code>/variable-choices/</code> endpoint to get valid options <code>VLAN X not found for device</code> VLAN not available Check device site VLANs or use <code>/variable-choices/</code> <code>IP address 'X' is not associated with device</code> IP not assigned to device Verify IP assignment in NetBox"},{"location":"api/commands/#best-practices","title":"Best Practices","text":""},{"location":"api/commands/#variable-management","title":"Variable Management","text":"<ol> <li>Use <code>/variable-choices/</code> endpoint to get valid options for NetBox data variables before execution</li> <li>Perform comprehensive validation using <code>/execute/</code> endpoint which includes all validation checks</li> <li>Handle validation errors gracefully - the <code>/execute/</code> endpoint provides detailed error messages</li> <li>Use meaningful variable names that match the command context</li> </ol>"},{"location":"api/commands/#error-handling_1","title":"Error Handling","text":"<ol> <li>Check HTTP status codes for different error types</li> <li>Implement retry logic for rate limiting (429 responses)</li> <li>Log detailed error information for debugging</li> <li>Validate input before sending API requests</li> </ol>"},{"location":"api/commands/#performance","title":"Performance","text":"<ol> <li>Use bulk execution for multiple devices when possible</li> <li>Batch requests to avoid API limits</li> <li>Cache variable choices when executing similar commands</li> <li>Monitor rate limits and implement backoff strategies</li> </ol>"},{"location":"api/commands/#related-documentation","title":"Related Documentation","text":"<ul> <li>Setup: Authentication Guide</li> <li>Examples: API Automation Examples</li> <li>Authentication: Authentication &amp; Permissions</li> <li>Troubleshooting: Error Handling</li> </ul>"},{"location":"api/endpoint-reference/","title":"API Endpoint Reference","text":"<p>Complete reference for all NetBox Toolkit Plugin API endpoints.</p> <p>Base URL: <code>/api/plugins/toolkit/</code></p> <p>Authentication: All endpoints require NetBox API token authentication via <code>Authorization: Token YOUR_TOKEN</code> header.</p>"},{"location":"api/endpoint-reference/#commands","title":"Commands","text":""},{"location":"api/endpoint-reference/#list-commands","title":"List Commands","text":"<p><code>GET /api/plugins/toolkit/commands/</code></p> <p>Description: Retrieve a list of all commands.</p> <p>Query Parameters:</p> <ul> <li><code>name</code> (string) - Filter by command name</li> <li><code>command_type</code> (string) - Filter by type: <code>show</code> or <code>config</code></li> <li><code>platform_id</code> (integer) - Filter by platform ID</li> <li><code>limit</code> (integer) - Number of results per page</li> <li><code>offset</code> (integer) - Pagination offset</li> </ul> <p>Response Fields:</p> Field Type Description <code>id</code> integer Unique command identifier <code>url</code> string API URL for this command <code>display</code> string Display representation <code>name</code> string Command name <code>command</code> string Actual command text <code>description</code> string Command description <code>platforms</code> array Array of platform objects <code>command_type</code> string <code>show</code> or <code>config</code> <code>variables</code> array Array of variable objects <code>tags</code> array Array of tag objects <code>custom_fields</code> object Custom field values <code>created</code> datetime Creation timestamp <code>last_updated</code> datetime Last update timestamp <p>Example Request: <pre><code>curl -H \"Authorization: Token YOUR_TOKEN\" \\\n  \"https://netbox.example.com/api/plugins/toolkit/commands/?command_type=show\"\n</code></pre></p> <p>Example Response: <pre><code>{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"id\": 1,\n      \"url\": \"https://netbox.example.com/api/plugins/toolkit/commands/1/\",\n      \"display\": \"Show Interfaces\",\n      \"name\": \"Show Interfaces\",\n      \"command\": \"show interfaces &lt;interface_name&gt;\",\n      \"description\": \"Display interface status and configuration\",\n      \"platforms\": [\n        {\n          \"id\": 5,\n          \"name\": \"Cisco IOS\",\n          \"slug\": \"cisco_ios\"\n        }\n      ],\n      \"command_type\": \"show\",\n      \"variables\": [\n        {\n          \"id\": 1,\n          \"name\": \"interface_name\",\n          \"display_name\": \"Interface Name\",\n          \"variable_type\": \"netbox_interface\",\n          \"required\": true,\n          \"help_text\": \"Select the interface to query\",\n          \"default_value\": \"\"\n        }\n      ],\n      \"tags\": [],\n      \"custom_fields\": {},\n      \"created\": \"2025-01-15T10:30:00Z\",\n      \"last_updated\": \"2025-01-15T10:30:00Z\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/endpoint-reference/#get-command","title":"Get Command","text":"<p><code>GET /api/plugins/toolkit/commands/{id}/</code></p> <p>Description: Retrieve a specific command by ID.</p> <p>Path Parameters:</p> <ul> <li><code>id</code> (integer, required) - Command ID</li> </ul> <p>Response: Same fields as List Commands (single object).</p> <p>Example Request: <pre><code>curl -H \"Authorization: Token YOUR_TOKEN\" \\\n  \"https://netbox.example.com/api/plugins/toolkit/commands/1/\"\n</code></pre></p>"},{"location":"api/endpoint-reference/#create-command","title":"Create Command","text":"<p><code>POST /api/plugins/toolkit/commands/</code></p> <p>Description: Create a new command.</p> <p>Request Body Fields:</p> Field Type Required Description <code>name</code> string \u2705 Command name (max 100 characters) <code>command</code> string \u2705 Command text (supports variables with <code>&lt;variable_name&gt;</code> syntax) <code>description</code> string \u274c Command description <code>platforms</code> array \u2705 Array of platform IDs <code>command_type</code> string \u2705 <code>show</code> or <code>config</code> <code>tags</code> array \u274c Array of tag objects <p>Example Request: <pre><code>curl -X POST -H \"Authorization: Token YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Show Version\",\n    \"command\": \"show version\",\n    \"description\": \"Display system version information\",\n    \"platforms\": [5],\n    \"command_type\": \"show\"\n  }' \\\n  \"https://netbox.example.com/api/plugins/toolkit/commands/\"\n</code></pre></p>"},{"location":"api/endpoint-reference/#update-command","title":"Update Command","text":"<p><code>PUT /api/plugins/toolkit/commands/{id}/</code> (full update) <code>PATCH /api/plugins/toolkit/commands/{id}/</code> (partial update)</p> <p>Description: Update an existing command.</p> <p>Example Request: <pre><code>curl -X PATCH -H \"Authorization: Token YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"description\": \"Updated description\"\n  }' \\\n  \"https://netbox.example.com/api/plugins/toolkit/commands/1/\"\n</code></pre></p>"},{"location":"api/endpoint-reference/#delete-command","title":"Delete Command","text":"<p><code>DELETE /api/plugins/toolkit/commands/{id}/</code></p> <p>Description: Delete a command.</p> <p>Example Request: <pre><code>curl -X DELETE -H \"Authorization: Token YOUR_TOKEN\" \\\n  \"https://netbox.example.com/api/plugins/toolkit/commands/1/\"\n</code></pre></p>"},{"location":"api/endpoint-reference/#execute-command","title":"Execute Command","text":"<p><code>POST /api/plugins/toolkit/commands/{id}/execute/</code></p> <p>Description: Execute a command on a device.</p> <p>Path Parameters:</p> <ul> <li><code>id</code> (integer, required) - Command ID</li> </ul> <p>Request Body Fields:</p> Field Type Required Description <code>device_id</code> integer \u2705 ID of target device <code>credential_token</code> string \u2705 Credential token from DeviceCredentialSet <code>variables</code> object \u274c Key-value pairs for command variables <code>timeout</code> integer \u274c Timeout in seconds (5-300, default: 30) <p>Response Fields:</p> Field Type Description <code>success</code> boolean Overall execution success <code>output</code> string Command output <code>error_message</code> string Error message if failed <code>execution_time</code> float Execution duration in seconds <code>command</code> object Command details (id, name, command_type) <code>device</code> object Device details (id, name) <code>syntax_error</code> object Syntax error detection details <code>parsed_output</code> object Parsed output data if available <p>Example Request: <pre><code>curl -X POST -H \"Authorization: Token YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"device_id\": 123,\n    \"credential_token\": \"abc123def456\",\n    \"variables\": {\n      \"interface_name\": \"GigabitEthernet0/1\"\n    },\n    \"timeout\": 30\n  }' \\\n  \"https://netbox.example.com/api/plugins/toolkit/commands/1/execute/\"\n</code></pre></p> <p>Example Response: <pre><code>{\n  \"success\": true,\n  \"output\": \"GigabitEthernet0/1 is up, line protocol is up...\",\n  \"error_message\": \"\",\n  \"execution_time\": 2.34,\n  \"command\": {\n    \"id\": 1,\n    \"name\": \"Show Interface\",\n    \"command_type\": \"show\"\n  },\n  \"device\": {\n    \"id\": 123,\n    \"name\": \"core-switch-01\"\n  },\n  \"syntax_error\": {\n    \"detected\": false\n  },\n  \"parsed_output\": {\n    \"success\": true,\n    \"method\": \"textfsm\",\n    \"data\": [\n      {\n        \"interface\": \"GigabitEthernet0/1\",\n        \"status\": \"up\",\n        \"protocol\": \"up\"\n      }\n    ]\n  }\n}\n</code></pre></p>"},{"location":"api/endpoint-reference/#bulk-execute-commands","title":"Bulk Execute Commands","text":"<p><code>POST /api/plugins/toolkit/commands/bulk-execute/</code></p> <p>Description: Execute commands on multiple devices simultaneously.</p> <p>Request Body Fields:</p> Field Type Required Description <code>executions</code> array \u2705 Array of execution objects <p>Execution Object Fields:</p> Field Type Required Description <code>command_id</code> integer \u2705 Command ID to execute <code>device_id</code> integer \u2705 Target device ID <code>credential_token</code> string \u2705 Credential token <code>variables</code> object \u274c Command variables <code>timeout</code> integer \u274c Timeout in seconds (5-300, default: 30) <p>Response Fields:</p> Field Type Description <code>results</code> array Array of execution results <code>summary</code> object Summary with total, successful, failed counts <p>Example Request: <pre><code>curl -X POST -H \"Authorization: Token YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"executions\": [\n      {\n        \"command_id\": 1,\n        \"device_id\": 101,\n        \"credential_token\": \"abc123\",\n        \"variables\": {\"vlan_id\": \"100\"}\n      },\n      {\n        \"command_id\": 1,\n        \"device_id\": 102,\n        \"credential_token\": \"abc123\",\n        \"variables\": {\"vlan_id\": \"100\"}\n      }\n    ]\n  }' \\\n  \"https://netbox.example.com/api/plugins/toolkit/commands/bulk-execute/\"\n</code></pre></p> <p>Example Response: <pre><code>{\n  \"results\": [\n    {\n      \"execution_id\": 1,\n      \"success\": true,\n      \"command_log_id\": 501,\n      \"execution_time\": 2.1\n    },\n    {\n      \"execution_id\": 2,\n      \"success\": true,\n      \"command_log_id\": 502,\n      \"execution_time\": 2.3\n    }\n  ],\n  \"summary\": {\n    \"total\": 2,\n    \"successful\": 2,\n    \"failed\": 0\n  }\n}\n</code></pre></p>"},{"location":"api/endpoint-reference/#get-variable-choices","title":"Get Variable Choices","text":"<p><code>GET /api/plugins/toolkit/commands/{id}/variable-choices/</code></p> <p>Description: Get available variable choices for a device.</p> <p>Path Parameters:</p> <ul> <li><code>id</code> (integer, required) - Command ID</li> </ul> <p>Query Parameters:</p> <ul> <li><code>device_id</code> (integer, required) - Device ID</li> </ul> <p>Response Fields:</p> Field Type Description <code>device_id</code> integer Device ID <code>device_name</code> string Device name <code>command_id</code> integer Command ID <code>command_name</code> string Command name <code>variables</code> object Variable choices keyed by variable name <p>Example Request: <pre><code>curl -H \"Authorization: Token YOUR_TOKEN\" \\\n  \"https://netbox.example.com/api/plugins/toolkit/commands/1/variable-choices/?device_id=123\"\n</code></pre></p> <p>Example Response: <pre><code>{\n  \"device_id\": 123,\n  \"device_name\": \"core-switch-01\",\n  \"command_id\": 1,\n  \"command_name\": \"Show Interface\",\n  \"variables\": {\n    \"interface_name\": {\n      \"type\": \"netbox_interface\",\n      \"choices\": [\n        {\n          \"value\": \"GigabitEthernet0/1\",\n          \"display\": \"GigabitEthernet0/1 (1000base-t)\",\n          \"id\": 45,\n          \"enabled\": true\n        },\n        {\n          \"value\": \"GigabitEthernet0/2\",\n          \"display\": \"GigabitEthernet0/2 (1000base-t)\",\n          \"id\": 46,\n          \"enabled\": true\n        }\n      ],\n      \"help_text\": \"Select the interface to query\",\n      \"default_value\": \"\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"api/endpoint-reference/#command-logs","title":"Command Logs","text":""},{"location":"api/endpoint-reference/#list-command-logs","title":"List Command Logs","text":"<p><code>GET /api/plugins/toolkit/command-logs/</code></p> <p>Description: Retrieve command execution history.</p> <p>Query Parameters:</p> <ul> <li><code>device_id</code> (integer) - Filter by device</li> <li><code>command_id</code> (integer) - Filter by command</li> <li><code>user_id</code> (integer) - Filter by user</li> <li><code>success</code> (boolean) - Filter by success status</li> <li><code>created__gte</code> (datetime) - Created after date</li> <li><code>created__lte</code> (datetime) - Created before date</li> <li><code>limit</code> (integer) - Results per page</li> <li><code>offset</code> (integer) - Pagination offset</li> </ul> <p>Response Fields:</p> Field Type Description <code>id</code> integer Log entry ID <code>url</code> string API URL for this log <code>display</code> string Display representation <code>command</code> object Nested command object <code>device</code> object Nested device object <code>output</code> string Command output <code>username</code> string User who executed command <code>execution_time</code> datetime Execution timestamp <code>success</code> boolean Execution success status <code>error_message</code> string Error message if failed <code>execution_duration</code> float Duration in seconds <code>created</code> datetime Creation timestamp <code>last_updated</code> datetime Last update timestamp <p>Example Request: <pre><code>curl -H \"Authorization: Token YOUR_TOKEN\" \\\n  \"https://netbox.example.com/api/plugins/toolkit/command-logs/?device_id=123&amp;success=true\"\n</code></pre></p> <p>Example Response: <pre><code>{\n  \"count\": 50,\n  \"next\": \"https://netbox.example.com/api/plugins/toolkit/command-logs/?limit=50&amp;offset=50\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"id\": 501,\n      \"url\": \"https://netbox.example.com/api/plugins/toolkit/command-logs/501/\",\n      \"display\": \"Show Interface on core-switch-01\",\n      \"command\": {\n        \"id\": 1,\n        \"name\": \"Show Interface\",\n        \"display\": \"Show Interface\"\n      },\n      \"device\": {\n        \"id\": 123,\n        \"name\": \"core-switch-01\",\n        \"display\": \"core-switch-01\"\n      },\n      \"output\": \"GigabitEthernet0/1 is up, line protocol is up...\",\n      \"username\": \"admin\",\n      \"execution_time\": \"2025-10-14T14:30:00Z\",\n      \"success\": true,\n      \"error_message\": \"\",\n      \"execution_duration\": 2.34,\n      \"created\": \"2025-10-14T14:30:00Z\",\n      \"last_updated\": \"2025-10-14T14:30:00Z\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/endpoint-reference/#get-command-log","title":"Get Command Log","text":"<p><code>GET /api/plugins/toolkit/command-logs/{id}/</code></p> <p>Description: Retrieve a specific command log entry.</p> <p>Path Parameters:</p> <ul> <li><code>id</code> (integer, required) - Log entry ID</li> </ul> <p>Response: Same fields as List Command Logs (single object).</p> <p>Example Request: <pre><code>curl -H \"Authorization: Token YOUR_TOKEN\" \\\n  \"https://netbox.example.com/api/plugins/toolkit/command-logs/501/\"\n</code></pre></p>"},{"location":"api/endpoint-reference/#get-statistics","title":"Get Statistics","text":"<p><code>GET /api/plugins/toolkit/command-logs/statistics/</code></p> <p>Description: Get comprehensive execution statistics.</p> <p>Response Fields:</p> Field Type Description <code>total_logs</code> integer Total number of log entries <code>success_rate</code> float Overall success rate percentage <code>last_24h</code> object Statistics for last 24 hours <code>top_commands</code> array Top 10 most-used commands <code>common_errors</code> array Top 10 common error messages <p>Example Request: <pre><code>curl -H \"Authorization: Token YOUR_TOKEN\" \\\n  \"https://netbox.example.com/api/plugins/toolkit/command-logs/statistics/\"\n</code></pre></p> <p>Example Response: <pre><code>{\n  \"total_logs\": 1523,\n  \"success_rate\": 94.35,\n  \"last_24h\": {\n    \"total\": 145,\n    \"successful\": 138,\n    \"failed\": 7\n  },\n  \"top_commands\": [\n    {\n      \"command_name\": \"Show Interfaces\",\n      \"count\": 423\n    },\n    {\n      \"command_name\": \"Show Version\",\n      \"count\": 312\n    }\n  ],\n  \"common_errors\": [\n    {\n      \"error\": \"Connection timeout\",\n      \"count\": 15\n    },\n    {\n      \"error\": \"Invalid credentials\",\n      \"count\": 8\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/endpoint-reference/#export-command-logs","title":"Export Command Logs","text":"<p><code>GET /api/plugins/toolkit/command-logs/export/</code></p> <p>Description: Export command logs to CSV or JSON.</p> <p>Query Parameters:</p> <ul> <li><code>format</code> (string) - Export format: <code>csv</code> or <code>json</code> (default: <code>json</code>)</li> <li><code>start_date</code> (date) - Filter logs from date (YYYY-MM-DD)</li> <li><code>end_date</code> (date) - Filter logs until date (YYYY-MM-DD)</li> <li>All standard filtering parameters from List Command Logs</li> </ul> <p>Response: CSV file download or JSON array.</p> <p>Example Request (CSV): <pre><code>curl -H \"Authorization: Token YOUR_TOKEN\" \\\n  \"https://netbox.example.com/api/plugins/toolkit/command-logs/export/?format=csv&amp;start_date=2025-01-01&amp;end_date=2025-12-31\" \\\n  -o command_logs.csv\n</code></pre></p> <p>Example Request (JSON): <pre><code>curl -H \"Authorization: Token YOUR_TOKEN\" \\\n  \"https://netbox.example.com/api/plugins/toolkit/command-logs/export/?format=json&amp;start_date=2025-10-01\"\n</code></pre></p> <p>Example Response (JSON): <pre><code>{\n  \"count\": 150,\n  \"results\": [\n    {\n      \"id\": 501,\n      \"command\": {\n        \"id\": 1,\n        \"name\": \"Show Interface\"\n      },\n      \"device\": {\n        \"id\": 123,\n        \"name\": \"core-switch-01\"\n      },\n      \"username\": \"admin\",\n      \"success\": true,\n      \"created\": \"2025-10-14T14:30:00Z\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/endpoint-reference/#error-responses","title":"Error Responses","text":"<p>All endpoints may return the following error responses:</p>"},{"location":"api/endpoint-reference/#400-bad-request","title":"400 Bad Request","text":"<p>Description: Invalid request parameters or validation errors.</p> <pre><code>{\n  \"device_id\": [\n    \"Device not found\"\n  ]\n}\n</code></pre>"},{"location":"api/endpoint-reference/#401-unauthorized","title":"401 Unauthorized","text":"<p>Description: Missing or invalid authentication token.</p> <pre><code>{\n  \"detail\": \"Authentication credentials were not provided.\"\n}\n</code></pre>"},{"location":"api/endpoint-reference/#403-forbidden","title":"403 Forbidden","text":"<p>Description: User lacks required permissions.</p> <pre><code>{\n  \"error\": \"You do not have permission to execute configuration commands\"\n}\n</code></pre>"},{"location":"api/endpoint-reference/#404-not-found","title":"404 Not Found","text":"<p>Description: Resource not found.</p> <pre><code>{\n  \"detail\": \"Not found.\"\n}\n</code></pre>"},{"location":"api/endpoint-reference/#429-too-many-requests","title":"429 Too Many Requests","text":"<p>Description: Rate limit exceeded.</p> <pre><code>{\n  \"error\": \"Rate limit exceeded\",\n  \"details\": {\n    \"reason\": \"Device rate limit exceeded\",\n    \"current_count\": 5,\n    \"limit\": 5,\n    \"time_window_minutes\": 60\n  }\n}\n</code></pre>"},{"location":"api/endpoint-reference/#500-internal-server-error","title":"500 Internal Server Error","text":"<p>Description: Server-side error during processing.</p> <pre><code>{\n  \"error\": \"An unexpected error occurred\"\n}\n</code></pre>"},{"location":"api/endpoint-reference/#related-documentation","title":"Related Documentation","text":"<ul> <li>Authentication Guide</li> <li>Command API Details</li> <li>Command Logs API</li> <li>Automation Examples</li> <li>API Workflows</li> <li>Error Handling</li> </ul>"},{"location":"api/errors/","title":"Error Handling","text":"<p>The NetBox Toolkit API provides comprehensive error handling with detailed error messages and appropriate HTTP status codes.</p>"},{"location":"api/errors/#http-status-codes","title":"HTTP Status Codes","text":""},{"location":"api/errors/#success-codes","title":"Success Codes","text":"<ul> <li>200 OK: Request successful</li> <li>201 Created: Resource created successfully</li> </ul>"},{"location":"api/errors/#client-error-codes","title":"Client Error Codes","text":"<ul> <li>400 Bad Request: Invalid input or execution failed</li> <li>401 Unauthorized: Authentication required</li> <li>403 Forbidden: Permission denied</li> <li>404 Not Found: Resource not found</li> <li>429 Too Many Requests: Rate limit exceeded</li> </ul>"},{"location":"api/errors/#server-error-codes","title":"Server Error Codes","text":"<ul> <li>500 Internal Server Error: Unexpected server error</li> </ul>"},{"location":"api/errors/#error-response-format","title":"Error Response Format","text":"<p>All API errors follow a consistent format:</p> <pre><code>{\n    \"error\": \"Brief error description\",\n    \"details\": {\n        \"field_name\": [\"Detailed error message\"],\n        \"another_field\": [\"Another error message\"]\n    }\n}\n</code></pre>"},{"location":"api/errors/#common-error-scenarios","title":"Common Error Scenarios","text":""},{"location":"api/errors/#1-authentication-errors","title":"1. Authentication Errors","text":""},{"location":"api/errors/#missing-token","title":"Missing Token","text":"<p><pre><code>HTTP/1.1 401 Unauthorized\n</code></pre> <pre><code>{\n    \"detail\": \"Authentication credentials were not provided.\"\n}\n</code></pre></p>"},{"location":"api/errors/#invalid-token","title":"Invalid Token","text":"<p><pre><code>HTTP/1.1 401 Unauthorized\n</code></pre> <pre><code>{\n    \"detail\": \"Invalid token.\"\n}\n</code></pre></p>"},{"location":"api/errors/#2-permission-errors","title":"2. Permission Errors","text":""},{"location":"api/errors/#insufficient-permissions","title":"Insufficient Permissions","text":"<p><pre><code>HTTP/1.1 403 Forbidden\n</code></pre> <pre><code>{\n    \"error\": \"You do not have permission to execute configuration commands\"\n}\n</code></pre></p>"},{"location":"api/errors/#object-not-found-due-to-permissions","title":"Object Not Found (Due to Permissions)","text":"<p><pre><code>HTTP/1.1 404 Not Found\n</code></pre> <pre><code>{\n    \"detail\": \"Not found.\"\n}\n</code></pre></p>"},{"location":"api/errors/#3-rate-limiting-errors","title":"3. Rate Limiting Errors","text":""},{"location":"api/errors/#rate-limit-exceeded","title":"Rate Limit Exceeded","text":"<p><pre><code>HTTP/1.1 429 Too Many Requests\n</code></pre> <pre><code>{\n    \"error\": \"Rate limit exceeded\",\n    \"details\": {\n        \"reason\": \"Rate limit exceeded: 10/10 successful commands in last 5 minutes\",\n        \"current_count\": 10,\n        \"limit\": 10,\n        \"time_window_minutes\": 5\n    }\n}\n</code></pre></p>"},{"location":"api/errors/#4-validation-errors","title":"4. Validation Errors","text":""},{"location":"api/errors/#missing-required-fields","title":"Missing Required Fields","text":"<p><pre><code>HTTP/1.1 400 Bad Request\n</code></pre> <pre><code>{\n    \"error\": \"Invalid input data\",\n    \"details\": {\n        \"device_id\": [\"This field is required.\"],\n        \"username\": [\"This field is required.\"]\n    }\n}\n</code></pre></p>"},{"location":"api/errors/#invalid-field-values","title":"Invalid Field Values","text":"<p><pre><code>HTTP/1.1 400 Bad Request\n</code></pre> <pre><code>{\n    \"error\": \"Invalid input data\",\n    \"details\": {\n        \"device_id\": [\"Invalid pk \\\"999\\\" - object does not exist.\"],\n        \"command_type\": [\"\\\"invalid\\\" is not a valid choice.\"]\n    }\n}\n</code></pre></p>"},{"location":"api/errors/#5-command-execution-errors","title":"5. Command Execution Errors","text":""},{"location":"api/errors/#device-not-found","title":"Device Not Found","text":"<p><pre><code>HTTP/1.1 404 Not Found\n</code></pre> <pre><code>{\n    \"error\": \"Device with ID 999 not found\"\n}\n</code></pre></p>"},{"location":"api/errors/#connection-failed","title":"Connection Failed","text":"<p><pre><code>HTTP/1.1 400 Bad Request\n</code></pre> <pre><code>{\n    \"success\": false,\n    \"output\": \"\",\n    \"error_message\": \"Connection timeout: Unable to connect to device\",\n    \"execution_time\": null,\n    \"command\": {\n        \"id\": 1,\n        \"name\": \"Show Version\",\n        \"command_type\": \"show\"\n    },\n    \"device\": {\n        \"id\": 123,\n        \"name\": \"switch01\"\n    },\n    \"syntax_error\": {\n        \"detected\": false\n    }\n}\n</code></pre></p>"},{"location":"api/errors/#authentication-failed","title":"Authentication Failed","text":"<p><pre><code>HTTP/1.1 400 Bad Request\n</code></pre> <pre><code>{\n    \"success\": false,\n    \"output\": \"\",\n    \"error_message\": \"Authentication failed: Invalid credentials\",\n    \"execution_time\": null,\n    \"command\": {\n        \"id\": 1,\n        \"name\": \"Show Version\",\n        \"command_type\": \"show\"\n    },\n    \"device\": {\n        \"id\": 123,\n        \"name\": \"switch01\"\n    }\n}\n</code></pre></p>"},{"location":"api/errors/#syntax-error-detected","title":"Syntax Error Detected","text":"<p><pre><code>HTTP/1.1 400 Bad Request\n</code></pre> <pre><code>{\n    \"success\": false,\n    \"output\": \"% Invalid input detected at '^' marker.\",\n    \"error_message\": \"Command execution failed\",\n    \"execution_time\": 0.5,\n    \"command\": {\n        \"id\": 1,\n        \"name\": \"Show Version\",\n        \"command_type\": \"show\"\n    },\n    \"device\": {\n        \"id\": 123,\n        \"name\": \"switch01\"\n    },\n    \"syntax_error\": {\n        \"detected\": true,\n        \"type\": \"invalid_input\",\n        \"vendor\": \"cisco\",\n        \"guidance_provided\": true\n    }\n}\n</code></pre></p>"},{"location":"api/errors/#6-bulk-operation-errors","title":"6. Bulk Operation Errors","text":""},{"location":"api/errors/#partial-failure","title":"Partial Failure","text":"<p><pre><code>HTTP/1.1 200 OK\n</code></pre> <pre><code>{\n    \"results\": [\n        {\n            \"execution_id\": 1,\n            \"success\": true,\n            \"command_log_id\": 123,\n            \"execution_time\": 1.5\n        },\n        {\n            \"execution_id\": 2,\n            \"success\": false,\n            \"error\": \"Device with ID 999 not found\"\n        },\n        {\n            \"execution_id\": 3,\n            \"success\": false,\n            \"error\": \"Insufficient permissions\"\n        }\n    ],\n    \"summary\": {\n        \"total\": 3,\n        \"successful\": 1,\n        \"failed\": 2\n    }\n}\n</code></pre></p>"},{"location":"api/errors/#no-executions-provided","title":"No Executions Provided","text":"<p><pre><code>HTTP/1.1 400 Bad Request\n</code></pre> <pre><code>{\n    \"error\": \"No executions provided\"\n}\n</code></pre></p>"},{"location":"api/errors/#7-export-errors","title":"7. Export Errors","text":""},{"location":"api/errors/#export-too-large","title":"Export Too Large","text":"<p><pre><code>HTTP/1.1 400 Bad Request\n</code></pre> <pre><code>{\n    \"error\": \"Export too large. Please use date filters to reduce size.\"\n}\n</code></pre></p>"},{"location":"api/errors/#invalid-date-format","title":"Invalid Date Format","text":"<p><pre><code>HTTP/1.1 400 Bad Request\n</code></pre> <pre><code>{\n    \"error\": \"Invalid start_date format. Use YYYY-MM-DD.\"\n}\n</code></pre></p>"},{"location":"api/errors/#error-handling-best-practices","title":"Error Handling Best Practices","text":""},{"location":"api/errors/#1-check-status-codes","title":"1. Check Status Codes","text":"<p>Always check HTTP status codes to determine the type of error:</p> <pre><code>import requests\n\nresponse = requests.post(\n    'https://netbox.example.com/api/plugins/toolkit/commands/1/execute/',\n    headers={'Authorization': 'Token your-token'},\n    json={'device_id': 123, 'username': 'admin', 'password': 'secret'}\n)\n\nif response.status_code == 200:\n    result = response.json()\n    if result['success']:\n        print(\"Command executed successfully\")\n    else:\n        print(f\"Command failed: {result['error_message']}\")\nelif response.status_code == 400:\n    print(\"Bad request:\", response.json())\nelif response.status_code == 403:\n    print(\"Permission denied:\", response.json())\nelif response.status_code == 429:\n    print(\"Rate limited:\", response.json())\nelse:\n    print(f\"Unexpected error {response.status_code}:\", response.json())\n</code></pre>"},{"location":"api/errors/#2-handle-rate-limiting-gracefully","title":"2. Handle Rate Limiting Gracefully","text":"<pre><code>import time\n\ndef execute_with_retry(command_id, device_id, username, password, max_retries=3):\n    for attempt in range(max_retries):\n        response = requests.post(\n            f'https://netbox.example.com/api/plugins/toolkit/commands/{command_id}/execute/',\n            headers={'Authorization': 'Token your-token'},\n            json={\n                'device_id': device_id,\n                'username': username,\n                'password': password\n            }\n        )\n\n        if response.status_code == 429:\n            # Rate limited, wait and retry\n            retry_after = int(response.headers.get('Retry-After', 60))\n            print(f\"Rate limited, waiting {retry_after} seconds...\")\n            time.sleep(retry_after)\n            continue\n\n        return response\n\n    raise Exception(\"Max retries exceeded\")\n</code></pre>"},{"location":"api/errors/#3-validate-input-before-sending","title":"3. Validate Input Before Sending","text":"<pre><code>def validate_execution_request(device_id, username, password):\n    errors = []\n\n    if not device_id:\n        errors.append(\"device_id is required\")\n    if not username:\n        errors.append(\"username is required\")\n    if not password:\n        errors.append(\"password is required\")\n\n    if errors:\n        raise ValueError(f\"Validation errors: {', '.join(errors)}\")\n</code></pre>"},{"location":"api/errors/#4-log-errors-for-debugging","title":"4. Log Errors for Debugging","text":"<pre><code>import logging\n\nlogger = logging.getLogger(__name__)\n\ndef execute_command(command_id, device_id, username, password):\n    try:\n        response = requests.post(...)\n\n        if response.status_code != 200:\n            logger.error(\n                f\"Command execution failed: {response.status_code} - {response.text}\"\n            )\n\n        return response\n    except requests.exceptions.RequestException as e:\n        logger.error(f\"Network error during command execution: {e}\")\n        raise\n</code></pre>"},{"location":"api/errors/#getting-help","title":"Getting Help","text":"<p>If you encounter persistent errors:</p> <ol> <li>Check the NetBox logs for detailed error information</li> <li>Verify your permissions setup</li> <li>Review the configuration guide</li> <li>Check for common issues in the Permission Examples section</li> <li>Check the GitHub issues for known problems</li> </ol>"},{"location":"api/workflows/","title":"API Workflow Examples","text":"<p>This document provides focused examples of API workflows that leverage the unique capabilities not available through the web interface. For complete API documentation, see the Commands API.</p>"},{"location":"api/workflows/#quick-api-workflow-examples","title":"Quick API Workflow Examples","text":""},{"location":"api/workflows/#1-bulk-device-configuration","title":"1. Bulk Device Configuration","text":"<p>Use Case: Deploy configuration to multiple devices simultaneously</p> <pre><code># Execute command across multiple devices\ncurl -X POST \"https://netbox.example.com/api/plugins/toolkit/commands/bulk-execute/\" \\\n  -H \"Authorization: Token YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"executions\": [\n      {\n        \"command_id\": 5,\n        \"device_id\": 101,\n        \"credential_token\": \"YOUR_CREDENTIAL_TOKEN\",\n        \"variables\": {\"vlan_id\": \"100\", \"description\": \"Guest Network\"}\n      },\n      {\n        \"command_id\": 5,\n        \"device_id\": 102,\n        \"credential_token\": \"YOUR_CREDENTIAL_TOKEN\",\n        \"variables\": {\"vlan_id\": \"100\", \"description\": \"Guest Network\"}\n      }\n    ]\n  }'\n</code></pre>"},{"location":"api/workflows/#2-operational-statistics","title":"2. Operational Statistics","text":"<p>Use Case: Get comprehensive network operations insights</p> <pre><code># Get execution statistics\ncurl -H \"Authorization: Token YOUR_TOKEN\" \\\n  \"https://netbox.example.com/api/plugins/toolkit/command-logs/statistics/\"\n\n# Export filtered logs\ncurl -H \"Authorization: Token YOUR_TOKEN\" \\\n  \"https://netbox.example.com/api/plugins/toolkit/command-logs/export/?format=csv&amp;start_date=2025-01-01\"\n</code></pre>"},{"location":"api/workflows/#3-dynamic-variable-discovery","title":"3. Dynamic Variable Discovery","text":"<p>Use Case: Build dynamic interfaces based on actual NetBox data</p> <pre><code># Get available variable choices for a specific device\ncurl -H \"Authorization: Token YOUR_TOKEN\" \\\n  \"https://netbox.example.com/api/plugins/toolkit/commands/1/variable-choices/?device_id=123\"\n\n# Execute with enhanced validation\ncurl -X POST \"https://netbox.example.com/api/plugins/toolkit/commands/1/execute/\" \\\n  -H \"Authorization: Token YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"device_id\": 123,\n    \"credential_token\": \"YOUR_CREDENTIAL_TOKEN\",\n    \"variables\": {\"interface_name\": \"GigabitEthernet0/1\"}\n  }'\n</code></pre>"},{"location":"api/workflows/#integration-patterns","title":"Integration Patterns","text":""},{"location":"api/workflows/#python-integration-example","title":"Python Integration Example","text":"<pre><code>import requests\n\nclass NetBoxToolkitAPI:\n    def __init__(self, base_url, token):\n        self.base_url = f\"{base_url}/api/plugins/toolkit\"\n        self.headers = {\n            \"Authorization\": f\"Token {token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def execute_command(self, command_id, device_id, credential_token, variables=None):\n        \"\"\"Execute single command with optional variables\"\"\"\n        payload = {\n            \"device_id\": device_id,\n            \"credential_token\": credential_token,\n            \"variables\": variables or {}\n        }\n\n        response = requests.post(\n            f\"{self.base_url}/commands/{command_id}/execute/\",\n            json=payload,\n            headers=self.headers\n        )\n        return response.json()\n\n    def bulk_execute(self, executions):\n        \"\"\"Execute multiple commands across multiple devices\"\"\"\n        response = requests.post(\n            f\"{self.base_url}/commands/bulk-execute/\",\n            json={\"executions\": executions},\n            headers=self.headers\n        )\n        return response.json()\n\n    def get_statistics(self):\n        \"\"\"Get comprehensive execution statistics\"\"\"\n        response = requests.get(\n            f\"{self.base_url}/command-logs/statistics/\",\n            headers=self.headers\n        )\n        return response.json()\n\n# Usage\napi = NetBoxToolkitAPI(\"https://netbox.example.com\", \"your-token\")\n\n# Single execution\nresult = api.execute_command(\n    command_id=1,\n    device_id=123,\n    credential_token=\"YOUR_CREDENTIAL_TOKEN\",\n    variables={\"interface_name\": \"GigabitEthernet0/1\"}\n)\n\n# Bulk execution\nbulk_result = api.bulk_execute([\n    {\n        \"command_id\": 1,\n        \"device_id\": 123,\n        \"credential_token\": \"YOUR_CREDENTIAL_TOKEN\",\n        \"variables\": {\"interface_name\": \"GigabitEthernet0/1\"}\n    },\n    {\n        \"command_id\": 2,\n        \"device_id\": 124,\n        \"credential_token\": \"YOUR_CREDENTIAL_TOKEN\",\n        \"variables\": {\"vlan_id\": \"100\"}\n    }\n])\n\n# Get statistics\nstats = api.get_statistics()\nprint(f\"Success rate: {stats['success_rate']}%\")\n</code></pre>"},{"location":"api/workflows/#ansible-integration-example","title":"Ansible Integration Example","text":"<pre><code>---\n- name: NetBox Toolkit Command Execution\n  hosts: localhost\n  vars:\n    netbox_url: \"https://netbox.example.com\"\n    netbox_token: \"{{ vault_netbox_token }}\"\n\n  tasks:\n    - name: Execute interface status check\n      uri:\n        url: \"{{ netbox_url }}/api/plugins/toolkit/commands/1/execute/\"\n        method: POST\n        headers:\n          Authorization: \"Token {{ netbox_token }}\"\n          Content-Type: \"application/json\"\n        body_format: json\n        body:\n          device_id: \"{{ device_id }}\"\n          credential_token: \"{{ credential_token }}\"\n          variables:\n            interface_name: \"{{ interface_name }}\"\n      register: command_result\n\n    - name: Display results\n      debug:\n        msg: \"Command execution {{ 'successful' if command_result.json.success else 'failed' }}\"\n</code></pre>"},{"location":"api/workflows/#jenkins-pipeline-example","title":"Jenkins Pipeline Example","text":"<pre><code>pipeline {\n    agent any\n\n    environment {\n        NETBOX_TOKEN = credentials('netbox-api-token')\n        NETBOX_URL = 'https://netbox.example.com'\n    }\n\n    stages {\n        stage('Deploy VLAN Configuration') {\n            steps {\n                script {\n                    def response = sh(\n                        script: \"\"\"\n                        curl -s -X POST \"${NETBOX_URL}/api/plugins/toolkit/commands/bulk-execute/\" \\\n                          -H \"Authorization: Token ${NETBOX_TOKEN}\" \\\n                          -H \"Content-Type: application/json\" \\\n                          -d '${buildBulkExecutionPayload()}'\n                        \"\"\",\n                        returnStdout: true\n                    )\n\n                    def result = readJSON text: response\n\n                    if (result.summary.failed &gt; 0) {\n                        error(\"Deployment failed on ${result.summary.failed} devices\")\n                    } else {\n                        echo \"Successfully deployed to ${result.summary.successful} devices\"\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"api/workflows/#advanced-automation-patterns","title":"Advanced Automation Patterns","text":""},{"location":"api/workflows/#1-configuration-drift-detection","title":"1. Configuration Drift Detection","text":"<p>Monitor and detect configuration changes across your network:</p> <pre><code>def detect_configuration_drift():\n    \"\"\"Compare current configuration with baseline\"\"\"\n\n    # Get baseline configurations from previous executions\n    baseline_logs = api.export_logs(\n        format=\"json\",\n        start_date=\"2025-01-01\",\n        command_name=\"show running-config\"\n    )\n\n    # Execute current configuration checks\n    current_results = api.bulk_execute(create_config_check_executions())\n\n    # Compare and identify drift\n    drift_analysis = compare_configurations(baseline_logs, current_results)\n\n    return drift_analysis\n</code></pre>"},{"location":"api/workflows/#2-automated-compliance-reporting","title":"2. Automated Compliance Reporting","text":"<p>Generate compliance reports with automatic remediation:</p> <pre><code>def compliance_audit():\n    \"\"\"Run comprehensive compliance checks\"\"\"\n\n    compliance_commands = [\n        {\"id\": 10, \"name\": \"NTP Check\"},\n        {\"id\": 11, \"name\": \"SNMP Security\"},\n        {\"id\": 12, \"name\": \"AAA Configuration\"}\n    ]\n\n    # Execute compliance checks\n    results = []\n    for command in compliance_commands:\n        result = api.bulk_execute(create_device_executions(command[\"id\"]))\n        results.append({\n            \"check\": command[\"name\"],\n            \"results\": result\n        })\n\n    # Generate compliance report\n    report = generate_compliance_report(results)\n\n    # Trigger remediation for non-compliant devices\n    if report[\"non_compliant_count\"] &gt; 0:\n        trigger_remediation(report[\"non_compliant_devices\"])\n\n    return report\n</code></pre>"},{"location":"api/workflows/#3-performance-monitoring-integration","title":"3. Performance Monitoring Integration","text":"<p>Integrate with monitoring systems for network performance tracking:</p> <pre><code>def network_performance_monitoring():\n    \"\"\"Collect performance metrics for monitoring systems\"\"\"\n\n    # Get interface utilization across all devices\n    utilization_results = api.bulk_execute(\n        create_interface_monitoring_executions()\n    )\n\n    # Get system health metrics\n    health_results = api.bulk_execute(\n        create_system_health_executions()\n    )\n\n    # Process and send to monitoring system\n    metrics = process_performance_data(utilization_results, health_results)\n    send_to_prometheus(metrics)  # or send_to_grafana, send_to_datadog, etc.\n\n    return metrics\n</code></pre>"},{"location":"api/workflows/#best-practices-for-api-integration","title":"Best Practices for API Integration","text":""},{"location":"api/workflows/#1-error-handling","title":"1. Error Handling","text":"<pre><code>def robust_command_execution(command_id, device_id, credentials, variables=None):\n    \"\"\"Execute command with proper error handling\"\"\"\n    try:\n        # Execute with enhanced validation (validation happens automatically)\n        if variables:\n            # Validation is now integrated into the execute endpoint\n\n        # Execute command\n        result = api.execute_command(command_id, device_id, credentials, variables)\n\n        # Check for execution errors\n        if not result[\"success\"]:\n            raise RuntimeError(f\"Command execution failed: {result['error_message']}\")\n\n        # Check for syntax errors\n        if result.get(\"syntax_error\", {}).get(\"detected\"):\n            logging.warning(f\"Syntax error detected: {result['syntax_error']}\")\n\n        return result\n\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"API request failed: {e}\")\n        raise\n    except Exception as e:\n        logging.error(f\"Command execution error: {e}\")\n        raise\n</code></pre>"},{"location":"api/workflows/#2-rate-limiting-and-retries","title":"2. Rate Limiting and Retries","text":"<pre><code>import time\nfrom functools import wraps\n\ndef retry_with_backoff(max_retries=3, backoff_factor=1):\n    \"\"\"Decorator for API calls with exponential backoff\"\"\"\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            for attempt in range(max_retries):\n                try:\n                    return func(*args, **kwargs)\n                except requests.exceptions.HTTPError as e:\n                    if e.response.status_code == 429:  # Rate limited\n                        if attempt &lt; max_retries - 1:\n                            wait_time = backoff_factor * (2 ** attempt)\n                            time.sleep(wait_time)\n                            continue\n                    raise\n            return None\n        return wrapper\n    return decorator\n\n@retry_with_backoff(max_retries=3, backoff_factor=2)\ndef execute_with_retry(command_id, device_id, credentials):\n    return api.execute_command(command_id, device_id, credentials)\n</code></pre>"},{"location":"api/workflows/#3-bulk-operation-optimization","title":"3. Bulk Operation Optimization","text":"<pre><code>def optimized_bulk_execution(commands, devices, credentials):\n    \"\"\"Optimize bulk executions by batching and parallel processing\"\"\"\n\n    # Create execution matrix\n    executions = []\n    for device in devices:\n        for command in commands:\n            executions.append({\n                \"command_id\": command[\"id\"],\n                \"device_id\": device[\"id\"],\n                \"username\": credentials[\"username\"],\n                \"password\": credentials[\"password\"],\n                \"variables\": command.get(\"variables\", {})\n            })\n\n    # Batch executions to avoid API limits\n    batch_size = 50\n    results = []\n\n    for i in range(0, len(executions), batch_size):\n        batch = executions[i:i + batch_size]\n        batch_result = api.bulk_execute(batch)\n        results.extend(batch_result[\"results\"])\n\n        # Add delay between batches to respect rate limits\n        time.sleep(1)\n\n    return results\n</code></pre> <p>For more comprehensive API examples and automation guides, see the API Automation Examples.</p>"},{"location":"development/","title":"Contributing Guide","text":"<p>We welcome contributions to the NetBox Toolkit Plugin! Every contribution helps improve the plugin for network engineers and automation teams worldwide.</p>"},{"location":"development/#quick-start-for-contributors","title":"\ud83d\ude80 Quick Start for Contributors","text":"<p>\ud83c\udfaf Recommended Path: Use the Dev Container for the fastest setup - complete environment in minutes!</p> <p>Traditional Setup: Start with Development Setup to get your environment ready.</p> <p>Code Reference Docs: Jump to Code Guide for codebase navigation.</p>"},{"location":"development/#development-sections","title":"\ud83d\udcda Development Sections","text":""},{"location":"development/#contribution-types","title":"\ud83d\udccb Contribution Types","text":"<p>Learn about the different ways to contribute: bug reports, feature development, documentation improvements, and testing.</p>"},{"location":"development/#development-workflow","title":"\ud83d\udee0\ufe0f Development Workflow","text":"<p>Step-by-step guide for setting up your environment, making changes, and submitting contributions.</p>"},{"location":"development/#technical-stack-architecture","title":"\ud83c\udfd7\ufe0f Technical Stack &amp; Architecture","text":"<p>Understanding the project's architecture principles, design patterns, and technical dependencies.</p>"},{"location":"development/#getting-help","title":"\ud83c\udd98 Getting Help","text":"<p>Resources for issue reporting, community support, and debugging assistance.</p>"},{"location":"development/#project-structure","title":"\ud83c\udfe2 Project Structure","text":"<p>For a deeper understanding of the codebase:</p> <ul> <li>Code Navigation Guide: Understand the codebase structure</li> <li>Architecture Overview: System design and component interaction</li> <li>Module Structure: Detailed breakdown of key components</li> </ul> <p>Each section above provides detailed information to help you contribute effectively to the NetBox Toolkit Plugin.</p>"},{"location":"development/architecture/","title":"Architecture Overview","text":""},{"location":"development/architecture/#typical-data-flow","title":"Typical Data Flow","text":"<p>A typical command execution flow:</p> <ol> <li>User selects a device and command in the web interface</li> <li>View calls the command service to execute the command</li> <li>Service creates a connector via the factory</li> <li>Connector establishes connection to the device</li> <li>Command is executed and results are returned</li> <li>Service logs the execution and processes the results</li> <li>View renders the results to the user</li> </ol> <p>This architecture ensures that each component has a single responsibility, making the code easier to maintain and extend.</p>"},{"location":"development/architecture/#key-design-patterns","title":"Key Design Patterns","text":""},{"location":"development/architecture/#factory-pattern","title":"Factory Pattern","text":"<p><code>ConnectorFactory</code> creates platform-specific connectors: <pre><code>connector = ConnectorFactory.create_connector(device.platform.slug)\n</code></pre></p>"},{"location":"development/architecture/#service-layer-pattern","title":"Service Layer Pattern","text":"<p>Business logic isolated in dedicated services:</p> <ul> <li><code>CommandExecutionService</code> - Command execution with retry logic</li> <li><code>DeviceService</code> - Device validation and info</li> <li><code>RateLimitingService</code> - Command rate limiting</li> </ul>"},{"location":"development/architecture/#platform-based-architecture","title":"Platform-Based Architecture","text":"<p>Commands are tied to NetBox platforms, not device types: <pre><code>command.platform = device.platform  # 'cisco_ios', 'cisco_nxos', etc.\n</code></pre></p>"},{"location":"development/architecture/#error-handling-strategy","title":"Error Handling Strategy","text":""},{"location":"development/architecture/#custom-exception-hierarchy","title":"Custom Exception Hierarchy","text":"<ul> <li><code>DeviceConnectionError</code> - Connection failures</li> <li><code>CommandExecutionError</code> - Command execution issues</li> <li><code>UnsupportedPlatformError</code> - Platform not supported</li> </ul>"},{"location":"development/architecture/#error-recovery","title":"Error Recovery","text":"<ul> <li>Automatic retry mechanisms in <code>CommandExecutionService</code></li> <li>Socket error handling in connection utilities</li> <li>Detailed error logging and user feedback</li> </ul>"},{"location":"development/architecture/#tech-stack","title":"Tech Stack","text":"<ul> <li>Scrapli/Scrapli-Community - Primary network device connections</li> <li>Netmiko - SSH fallback</li> <li>NetBox Platform Model - Command-platform associations</li> <li>Tabler CSS - UI framework (NetBox standard)</li> </ul> <p>The error handling architecture provides:</p> <ol> <li>Hierarchical Exceptions: Custom exceptions for different error categories</li> <li>Contextual Error Messages: Errors include guidance based on the specific problem</li> <li>Graceful Degradation: Services handle errors and provide useful feedback</li> <li>Recovery Mechanisms: Automatic retry with exponential backoff for transient issues</li> </ol>"},{"location":"development/code-guide/","title":"NetBox Toolkit Plugin - Code Guide","text":"<p>Quick navigation guide for developers working on the NetBox Toolkit Plugin codebase.</p>"},{"location":"development/code-guide/#key-files-classes","title":"\ud83d\udcc1 Key Files &amp; Classes","text":""},{"location":"development/code-guide/#core-models-netbox_toolkit_pluginmodelspy","title":"Core Models (<code>netbox_toolkit_plugin/models.py</code>)","text":"<ul> <li><code>Command</code> - Platform-based commands (show/config types)</li> <li><code>CommandLog</code> - Execution history with error detection</li> </ul>"},{"location":"development/code-guide/#service-layer-netbox_toolkit_pluginservices","title":"Service Layer (<code>netbox_toolkit_plugin/services/</code>)","text":"<ul> <li><code>CommandExecutionService</code> - Main command execution logic</li> <li><code>DeviceService</code> - Device validation and connection info</li> <li><code>RateLimitingService</code> - Prevents command flooding</li> </ul>"},{"location":"development/code-guide/#connector-framework-netbox_toolkit_pluginconnectors","title":"Connector Framework (<code>netbox_toolkit_plugin/connectors/</code>)","text":"<ul> <li><code>BaseDeviceConnector</code> - Abstract interface for all connectors</li> <li><code>ScrapliConnector</code> - Scrapli-based implementation (primary)</li> <li><code>ConnectorFactory</code> - Creates platform-specific connectors</li> </ul>"},{"location":"development/code-guide/#views-netbox_toolkit_pluginviewspy","title":"Views (<code>netbox_toolkit_plugin/views.py</code>)","text":"<ul> <li><code>DeviceToolkitView</code> - Custom \"Toolkit\" tab on device pages</li> <li><code>CommandListView</code> - Command management interface</li> </ul>"},{"location":"development/code-guide/#dependencies","title":"\ud83d\udce6 Dependencies","text":""},{"location":"development/code-guide/#primary-libraries","title":"Primary Libraries","text":"<ul> <li>Scrapli - Network device connections (SSH/Telnet/NETCONF)</li> <li>Scrapli-Community - Extended platform support</li> <li>Netmiko - SSH fallback</li> </ul>"},{"location":"development/code-guide/#netbox-integration","title":"NetBox Integration","text":"<ul> <li>Uses NetBox's <code>Platform</code> model (not <code>DeviceType</code>)</li> <li>Leverages <code>ObjectPermission</code> for access control</li> <li>Integrates with NetBox's tab system via <code>ViewTab</code></li> </ul>"},{"location":"development/code-guide/#configuration","title":"\ud83d\udd27 Configuration","text":"<p>Central config in <code>config.py</code>: - Connection timeouts - SSH options - Debug settings - Rate limiting parameters</p>"},{"location":"development/contribution-types/","title":"Contribution Types","text":"<p>This section outlines the different ways you can contribute to the NetBox Toolkit Plugin.</p>"},{"location":"development/contribution-types/#bug-reports-fixes","title":"\ud83d\udc1b Bug Reports &amp; Fixes","text":""},{"location":"development/contribution-types/#before-submitting-bug-reports","title":"Before Submitting Bug Reports:","text":"<ul> <li>Search existing issues for duplicates</li> <li>Test with the latest version</li> <li>Include NetBox version and plugin version</li> </ul>"},{"location":"development/contribution-types/#what-to-include-in-bug-reports","title":"What to Include in Bug Reports:","text":"<ul> <li>Clear description of the bug</li> <li>Steps to reproduce the issue</li> <li>Expected vs actual behavior</li> <li>Error messages or logs</li> <li>Network device details if relevant</li> </ul>"},{"location":"development/contribution-types/#feature-requests-development","title":"\u2728 Feature Requests &amp; Development","text":""},{"location":"development/contribution-types/#before-starting-development","title":"Before Starting Development:","text":"<ul> <li>Open an issue to discuss major changes</li> <li>Review existing feature requests</li> <li>Consider backward compatibility</li> </ul>"},{"location":"development/contribution-types/#development-guidelines","title":"Development Guidelines:","text":"<ul> <li>Use the <code>develop</code> branch for latest features (Development Setup)</li> <li>Follow existing code patterns and architecture</li> <li>Update documentation for user-facing changes</li> <li>Add tests for new functionality</li> </ul>"},{"location":"development/contribution-types/#documentation-improvements","title":"\ud83d\udcda Documentation Improvements","text":""},{"location":"development/contribution-types/#areas-of-focus","title":"Areas of Focus:","text":"<ul> <li>Network engineer clarity (avoid programming jargon)</li> <li>Practical examples and use cases</li> <li>Configuration snippets and troubleshooting</li> <li>Cross-linking between related topics</li> </ul>"},{"location":"development/contribution-types/#testing-contributions","title":"\ud83e\uddea Testing Contributions","text":""},{"location":"development/contribution-types/#testing-priorities","title":"Testing Priorities:","text":"<ul> <li>Device connector reliability</li> <li>Permission system functionality</li> <li>Rate limiting behavior</li> <li>API endpoint coverage</li> </ul>"},{"location":"development/development-workflow/","title":"Development Workflow","text":"<p>Follow this step-by-step process to contribute code changes to the NetBox Toolkit Plugin.</p>"},{"location":"development/development-workflow/#development-environment-options","title":"Development Environment Options","text":""},{"location":"development/development-workflow/#using-dev-container-recommended","title":"\ud83d\ude80 Using Dev Container (Recommended)","text":"<p>If you're using the dev container, many setup steps are automated:</p> <ul> <li>\u2705 Environment setup is complete after container starts</li> <li>\u2705 Plugin is automatically installed in development mode</li> <li>\u2705 Database migrations are applied automatically</li> <li>\u2705 NetBox server starts automatically</li> <li>\ud83d\udd04 Use <code>netbox-reload</code> instead of manual <code>pip install -e .</code></li> <li>\ud83d\udd04 Use <code>netbox-restart</code> for server management</li> <li>\ud83d\udd04 Use <code>netbox-logs</code> to view server output</li> </ul> <p>\ud83d\udcd6 Dev Container Details: See <code>.devcontainer/README.md</code> in the project root for configuration options.</p>"},{"location":"development/development-workflow/#traditional-development-setup","title":"\ud83d\udee0\ufe0f Traditional Development Setup","text":"<p>For manual environment setup, follow the complete guide: Development Setup</p>"},{"location":"development/development-workflow/#1-environment-setup","title":"1. Environment Setup","text":"<p>Follow the complete setup guide: Development Setup</p>"},{"location":"development/development-workflow/#2-create-a-branch-for-development","title":"2. Create a Branch for Development","text":"<p>For Develop Branch Development:</p> <pre><code>git checkout develop\ngit pull upstream develop\ngit checkout -b feature/your-feature-name\n</code></pre>"},{"location":"development/development-workflow/#3-make-your-changes","title":"3. Make Your Changes","text":"<p>Using Dev Container: <pre><code># Make your changes locally (files are automatically synced)\n# Edit files...\n\n# If you changed package structure, reinstall plugin\nnetbox-reload\n\n# Migrations are applied automatically on restart\n# Or apply manually if needed:\ncd /opt/netbox/netbox\npython manage.py migrate netbox_toolkit_plugin\n</code></pre></p> <p>Traditional Development: <pre><code># Make your changes locally\n# Edit files...\n\n# If you changed package structure, reinstall\npip install -e .\n\n# Apply any new migrations\ncd /opt/netbox/netbox\npython manage.py migrate netbox_toolkit_plugin\n</code></pre></p>"},{"location":"development/development-workflow/#4-test-your-changes","title":"4. Test Your Changes","text":"<p>Using Dev Container: <pre><code># NetBox is already running at http://localhost:8000\n# Test your changes in the browser\n# Check logs for any issues\nnetbox-logs\n\n# Run tests and linting\nnetbox-test\nruff-check .\n</code></pre></p> <p>Traditional Development: <pre><code># Run NetBox development server\ncd /opt/netbox/netbox\npython manage.py runserver 0.0.0.0:8000\n\n# Test your changes in the browser\n# Check logs for any issues\n\n# Run tests and linting\npython -m pytest\nruff check .\n</code></pre></p>"},{"location":"development/development-workflow/#5-commit-and-push-changes","title":"5. Commit and Push Changes","text":"<pre><code>git add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre>"},{"location":"development/development-workflow/#6-submit-a-pull-request","title":"6. Submit a Pull Request","text":"<p>After pushing to your fork:</p> <ol> <li>Navigate to your fork on GitHub (e.g., <code>https://github.com/yourusername/netbox-toolkit-plugin</code>)</li> <li>GitHub will often show a banner suggesting to create a pull request for your recently pushed branch</li> <li>Click \"Compare &amp; pull request\" or go to the \"Pull requests\" tab and click \"New pull request\"</li> <li>Ensure the base repository is set correctly:<ul> <li>Base repository: <code>bonzo81/netbox-toolkit-plugin</code></li> <li>Base branch: <code>develop</code> (for new features) or <code>main</code> (for hotfixes)</li> <li>Head repository: <code>yourusername/netbox-toolkit-plugin</code></li> <li>Compare branch: <code>feature/your-feature-name</code></li> </ul> </li> <li>Fill out the pull request template with details about your changes</li> <li>Submit the pull request</li> </ol>"},{"location":"development/development-workflow/#important-notes","title":"Important Notes:","text":"<ul> <li>Pull requests are NOT created automatically - you must create them manually</li> <li>Your changes go to your fork first, then you request they be pulled into the main repository</li> <li>For new features, target the <code>develop</code> branch</li> <li>For bug fixes on released versions, target the <code>main</code> branch</li> </ul>"},{"location":"development/getting-help/","title":"Getting Help","text":"<p>Find the support and resources you need to successfully contribute to the NetBox Toolkit Plugin.</p>"},{"location":"development/getting-help/#issue-reporting","title":"\ud83c\udd98 Issue Reporting","text":"<p>Submit bugs and feature requests: GitHub Issues</p>"},{"location":"development/getting-help/#for-feature-proposals","title":"For Feature Proposals:","text":"<ul> <li>Explain the network engineering use case</li> <li>Describe how it would work from a user perspective</li> <li>Keep scope focused for easier implementation</li> <li>Consider impact on existing workflows</li> </ul>"},{"location":"development/getting-help/#community-support","title":"\ud83d\udcac Community Support","text":"<ul> <li>Questions: Use GitHub Discussions for general questions</li> <li>Code Review: Submit pull requests for collaborative improvement</li> <li>Documentation: Help improve guides for other network engineers</li> </ul>"},{"location":"development/getting-help/#debugging-resources","title":"\ud83d\udd0d Debugging Resources","text":"<ul> <li>Code Navigation Guide: Understand the codebase structure</li> <li>Architecture Overview: System design and component interaction</li> <li>Module Structure: Detailed breakdown of key components</li> </ul>"},{"location":"development/module-structure/","title":"Module Structure","text":""},{"location":"development/module-structure/#quick-reference","title":"Quick Reference","text":"<p>Key Classes by Module:</p> <ul> <li><code>models.py</code>: <code>Command</code>, <code>CommandLog</code> </li> <li><code>views.py</code>: <code>DeviceToolkitView</code>, <code>CommandListView</code></li> <li><code>services/command_service.py</code>: <code>CommandExecutionService</code></li> <li><code>services/device_service.py</code>: <code>DeviceService</code></li> <li><code>services/rate_limiting_service.py</code>: <code>RateLimitingService</code></li> <li><code>connectors/factory.py</code>: <code>ConnectorFactory</code></li> <li><code>connectors/scrapli_connector.py</code>: <code>ScrapliConnector</code></li> <li><code>connectors/netmiko_connector.py</code>: <code>NetmikoConnector</code></li> </ul>"},{"location":"development/module-structure/#directory-structure","title":"Directory Structure","text":"<pre><code>netbox_toolkit_plugin/\n\u251c\u2500\u2500 __init__.py             # Plugin initialization\n\u251c\u2500\u2500 admin.py                # Django admin interface definitions\n\u251c\u2500\u2500 config.py               # Plugin configuration settings\n\u251c\u2500\u2500 exceptions.py           # Custom exception classes\n\u251c\u2500\u2500 filtersets.py           # Filter definitions for views\n\u251c\u2500\u2500 forms.py                # Django form definitions\n\u251c\u2500\u2500 models.py               # Django data models\n\u251c\u2500\u2500 navigation.py           # NetBox navigation integration\n\u251c\u2500\u2500 tables.py               # NetBox table definitions\n\u251c\u2500\u2500 urls.py                 # URL routing definitions\n\u251c\u2500\u2500 views.py                # Django view implementations\n\u251c\u2500\u2500 api/                    # REST API implementation\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 serializers.py      # API serializers\n\u2502   \u251c\u2500\u2500 urls.py             # API URL routing\n\u2502   \u2514\u2500\u2500 views.py            # API views\n\u251c\u2500\u2500 connectors/             # Device connection framework\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 base.py             # Abstract connector interfaces\n\u2502   \u251c\u2500\u2500 factory.py          # Connector factory implementation\n\u2502   \u251c\u2500\u2500 netmiko_connector.py # Netmiko-based connector implementation\n\u2502   \u2514\u2500\u2500 scrapli_connector.py # Scrapli-based connector implementation\n\u251c\u2500\u2500 migrations/             # Django database migrations\n\u251c\u2500\u2500 services/               # Business logic services\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 command_service.py  # Command execution service\n\u2502   \u251c\u2500\u2500 device_service.py   # Device management service\n\u2502   \u2514\u2500\u2500 rate_limiting_service.py # Rate limiting service\n\u251c\u2500\u2500 static/                 # Static assets (CSS, JavaScript)\n\u2502   \u2514\u2500\u2500 netbox_toolkit_plugin/\n\u2502       \u251c\u2500\u2500 css/\n\u2502       \u2502   \u2514\u2500\u2500 toolkit.css\n\u2502       \u2514\u2500\u2500 js/\n\u2502           \u2514\u2500\u2500 toolkit.js\n\u251c\u2500\u2500 templates/              # Django HTML templates\n\u2502   \u2514\u2500\u2500 netbox_toolkit_plugin/\n\u2502       \u251c\u2500\u2500 command.html\n\u2502       \u251c\u2500\u2500 command_edit.html\n\u2502       \u251c\u2500\u2500 command_list.html\n\u2502       \u251c\u2500\u2500 commandlog.html\n\u2502       \u251c\u2500\u2500 commandlog_list.html\n\u2502       \u2514\u2500\u2500 device_toolkit.html\n\u2514\u2500\u2500 utils/                  # Utility functions\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 connection.py       # Connection utilities\n    \u251c\u2500\u2500 error_parser.py     # Network error parsing utilities\n    \u251c\u2500\u2500 logging.py          # Logging utilities\n    \u2514\u2500\u2500 network.py          # Network utilities\n</code></pre>"},{"location":"development/module-structure/#core-modules","title":"Core Modules","text":""},{"location":"development/module-structure/#plugin-core","title":"Plugin Core","text":"<ul> <li>models.py: <code>Command</code> (platform-based commands), <code>CommandLog</code> (execution history)</li> <li>views.py: <code>DeviceToolkitView</code> (device tab), view classes for command management</li> <li>config.py: <code>ToolkitSettings</code> class with connection timeouts and SSH settings</li> <li>exceptions.py: <code>DeviceConnectionError</code>, <code>CommandExecutionError</code>, <code>UnsupportedPlatformError</code></li> </ul>"},{"location":"development/module-structure/#service-layer-services","title":"Service Layer (<code>services/</code>)","text":"<ul> <li>command_service.py: <code>CommandExecutionService</code> - Core command execution logic</li> <li>device_service.py: <code>DeviceService</code> - Device validation and connection info</li> <li>rate_limiting_service.py: <code>RateLimitingService</code> - Command rate limiting</li> </ul>"},{"location":"development/module-structure/#connector-framework-connectors","title":"Connector Framework (<code>connectors/</code>)","text":"<ul> <li>base.py: <code>BaseDeviceConnector</code> - Abstract interface, <code>CommandResult</code> data class</li> <li>factory.py: <code>ConnectorFactory</code> - Platform-based connector creation</li> <li>scrapli_connector.py: <code>ScrapliConnector</code> - Scrapli library implementation</li> <li>netmiko_connector.py: <code>NetmikoConnector</code> - Netmiko library implementation</li> </ul>"},{"location":"development/module-structure/#api-layer-api","title":"API Layer (<code>api/</code>)","text":"<ul> <li>views.py: <code>CommandViewSet</code> with <code>execute_command</code> action - REST API for command execution</li> <li>serializers.py: <code>CommandSerializer</code>, <code>CommandLogSerializer</code> - API data serialization</li> </ul>"},{"location":"development/setup/","title":"Development Setup","text":"<p>This guide will help you set up a development environment for working on the NetBox Toolkit Plugin.</p> <p>\ud83d\udca1 Tip: Start with the Contributing Guide for the complete development workflow and overview.</p> <p>After setting up your environment, follow the Development Workflow for the complete step-by-step contribution process.</p>"},{"location":"development/setup/#setting-up-a-development-environment","title":"Setting Up a Development Environment","text":""},{"location":"development/setup/#quick-start-with-dev-container-recommended","title":"\ud83d\ude80 Quick Start with Dev Container (Recommended)","text":"<p>The fastest way to get started is using the pre-configured development container, which includes NetBox, PostgreSQL, Redis, and all development tools.</p> <p>Prerequisites: Docker and VS Code with the \"Dev Containers\" extension.</p> <ol> <li> <p>Open in Dev Container:    <pre><code># Option 1: Open in VS Code\n# - Open the project in VS Code\n# - When prompted, click \"Reopen in Container\"\n# - Or use Ctrl+Shift+P \u2192 \"Dev Containers: Reopen in Container\"\n</code></pre></p> </li> <li> <p>Wait for Setup: The container automatically:</p> </li> <li>Installs the plugin in development mode</li> <li>Sets up PostgreSQL and Redis</li> <li>Creates a superuser account (<code>admin</code>/<code>admin</code>)</li> <li> <p>Starts NetBox on http://localhost:8000</p> </li> <li> <p>Start Developing: NetBox is now running and ready for development!</p> </li> </ol> <p>\ud83d\udca1 Dev Container Benefits:</p> <ul> <li>\u2705 Complete environment in minutes</li> <li>\u2705 All dependencies pre-installed</li> <li>\u2705 Consistent across different machines</li> <li>\u2705 Includes development tools (Ruff, Python extensions)</li> <li>\u2705 Works with GitHub Codespaces</li> </ul> <p>\ud83d\udcd6 Learn more: See <code>.devcontainer/README.md</code> in the project root for advanced configuration options.</p>"},{"location":"development/setup/#traditional-development-setup","title":"\ud83d\udee0\ufe0f Traditional Development Setup","text":"<p>If you prefer manual setup or need more control over your environment, follow these steps:</p>"},{"location":"development/setup/#1-fork-the-repository","title":"1. Fork the Repository","text":"<p>Fork the 'netbox-toolkit-plugin' repo on GitHub.</p>"},{"location":"development/setup/#2-clone-the-repository","title":"2. Clone the Repository","text":"<p>Clone your forked repository locally:</p> <pre><code>$ git clone git@github.com:&lt;username&gt;/netbox-toolkit-plugin.git\n$ cd netbox-toolkit-plugin\n\n# Add upstream remote to sync with main repo\n$ git remote add upstream https://github.com/bonzo81/netbox-toolkit-plugin.git\n</code></pre>"},{"location":"development/setup/#3-select-develop-branch","title":"3. Select develop Branch","text":"<pre><code>$ git checkout develop\n</code></pre> <p>\u26a0\ufe0f Develop Branch Considerations:</p> <ul> <li>Contains latest development features and fixes</li> <li>Not for Production: Unstable and may contain breaking changes</li> <li>Database Migrations: Development migrations may change, requiring resets</li> <li>Active Development: Code is actively changing and may contain bugs</li> </ul>"},{"location":"development/setup/#4-create-a-virtual-environment","title":"4. Create a Virtual Environment","text":"<p>Activate the NetBox virtual environment (see the NetBox documentation under Setting up a Development Environment):</p> <pre><code>$ source /opt/netbox/venv/bin/activate\n</code></pre>"},{"location":"development/setup/#5-install-plugin-in-develop-mode","title":"5. Install plugin in Develop Mode","text":"<p>Add the plugin to NetBox virtual environment in Develop mode (see Plugins Development):</p> <p>To ease development, it is recommended to go ahead and install the plugin at this point using setuptools' <code>develop</code> mode. This will create symbolic links within your Python environment to the plugin development directory. Call <code>pip</code> from the plugin's root directory with the <code>-e</code> flag:</p> <pre><code>$ pip install -e .\n</code></pre>"},{"location":"development/setup/#6-apply-migrations","title":"6. Apply Migrations","text":"<pre><code>cd /opt/netbox/netbox\npython manage.py migrate netbox_toolkit\n</code></pre>"},{"location":"development/setup/#7-collect-static-files","title":"7. Collect Static Files","text":"<pre><code>cd /opt/netbox/netbox\npython manage.py collectstatic --no-input\n</code></pre>"},{"location":"development/setup/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<p>Now that your development environment is set up, you're ready to start contributing!</p> <p>Continue with the Development Workflow to learn how to:</p> <ul> <li>Create feature branches</li> <li>Make and test changes</li> <li>Submit pull requests</li> <li>Follow contribution best practices</li> </ul> <p>The workflow guide provides the complete step-by-step process for contributing to the NetBox Toolkit Plugin.</p>"},{"location":"development/technical-stack/","title":"Technical Stack &amp; Architecture","text":"<p>Understanding these technical details helps guide contribution decisions and ensures consistency with the project's design.</p>"},{"location":"development/technical-stack/#architecture-principles","title":"\ud83c\udfd7\ufe0f Architecture Principles","text":""},{"location":"development/technical-stack/#core-design-patterns","title":"Core Design Patterns","text":"<p>\u2705 Platform-Based Commands: All commands are tied to NetBox platforms (see <code>netbox_toolkit_plugin/models.py</code>)</p> <p>\u2705 Service Layer Architecture: Business logic isolated in dedicated service classes (see <code>services/</code> directory)</p> <p>\u2705 Connector Abstraction: Uniform interface for all device connections (see <code>connectors/</code> directory)</p> <p>\u2705 Permission Integration: Leverages NetBox's ObjectPermission system for access control</p> <p>\u2705 Secure Credentials: NetBox API authentication + encrypted credential tokens for enhanced security</p>"},{"location":"development/technical-stack/#technical-stack","title":"\ud83d\udd27 Technical Stack","text":""},{"location":"development/technical-stack/#primary-network-libraries","title":"Primary Network Libraries","text":"<ul> <li>Scrapli: Primary connection library (SSH/Telnet/NETCONF)</li> <li>Scrapli-Community: Extended platform support</li> <li>Netmiko: SSH fallback for legacy or problematic devices</li> <li>TextFSM: Structured output parsing</li> </ul>"},{"location":"development/technical-stack/#netbox-integration-points","title":"NetBox Integration Points","text":"<ul> <li>Platform Model: Commands are bound to NetBox platforms, not device types</li> <li>ObjectPermission System: Granular access control using NetBox's permission framework</li> <li>ViewTab System: Custom tabs integrated into NetBox device pages</li> <li>Plugin Configuration: Standard NetBox plugin configuration patterns</li> </ul>"},{"location":"user/command-creation/","title":"Command Creation","text":"<p>This guide explains how to create and manage network commands in the NetBox Toolkit Plugin.</p>"},{"location":"user/command-creation/#overview","title":"Overview","text":"<p>Commands are the core building blocks of the NetBox Toolkit Plugin. Each command defines:</p> <ul> <li>The network command to execute (e.g., <code>show version</code>, <code>show interfaces status</code>)</li> <li>The network platform it works with (Cisco IOS, Juniper JunOS, etc.)</li> <li>Command type (Show commands for read-only operations, Config commands for changes)</li> <li>Variables for dynamic command execution</li> </ul>"},{"location":"user/command-creation/#creating-your-first-command","title":"Creating Your First Command","text":""},{"location":"user/command-creation/#step-1-access-command-management","title":"Step 1: Access Command Management","text":"<ol> <li>Log in to your NetBox instance</li> <li>Click on Command Toolkit &gt; Commands in the navigation bar</li> <li>Click \"Add\" to create a new command</li> </ol>"},{"location":"user/command-creation/#step-2-basic-command-information","title":"Step 2: Basic Command Information","text":"<p>Fill in the essential command details:</p> <ul> <li> <p>Name: A descriptive name that clearly indicates what the command does</p> <ul> <li>Good: <code>\"Show Interface Status\"</code>, <code>\"Check Device Version\"</code></li> <li>Avoid: <code>\"Command 1\"</code>, <code>\"Test\"</code></li> </ul> </li> <li> <p>Command: The actual network command to execute</p> <ul> <li>Simple commands: <code>show version</code>, <code>show running-config</code></li> <li>Commands with variables: <code>show interface &lt;interface_name&gt; status</code></li> </ul> </li> <li> <p>Platform: The network device platform this command works with</p> <ul> <li>Common options: <code>cisco_ios</code>, <code>cisco_nxos</code>, <code>juniper_junos</code>, <code>arista_eos</code></li> </ul> </li> <li> <p>Command Type: Choose the appropriate type:</p> <ul> <li>Show Command: Read-only operations (monitoring, troubleshooting)</li> <li>Configuration Command: Write operations (configuration changes)</li> </ul> </li> </ul>"},{"location":"user/command-creation/#step-3-add-command-variables-optional","title":"Step 3: Add Command Variables (Optional)","text":"<p>It is possible to add varaibles to a command. Variable can be free text or can be linked to NetBox objects. Currently only interfaces, IP addresses and VLANs are supported as NetBox object types.</p> <p>In the Command box, use snake_case - <code>&lt;variable_name&gt;</code> - syntax to define each variable.</p> <p>For example: <code>show interface &lt;interface_name&gt; status</code></p> <p>Or multiple variables in one command: <code>ping &lt;destination_ip&gt; source &lt;source_interface&gt;</code></p> <ol> <li>Click \"Add Variable\" to create a new variable</li> <li>Configure each variable:<ul> <li>Name: Variable identifier in snake_case (e.g., <code>interface_name</code>)</li> <li>Display Name: User-friendly name (e.g., <code>Interface Name</code>)</li> <li>Variable Type: Field type (Free Text or NetBox Object - Interface, IP Address, VLAN)</li> <li>Required: Whether the variable must be filled</li> <li>Help Text: Help text for users</li> <li>Default Value: Optional default value</li> </ul> </li> </ol>"},{"location":"user/command-creation/#step-4-save-the-command","title":"Step 4: Save the Command","text":"<p>Click \"Create\" to save your new command.</p>"},{"location":"user/command-creation/#command-examples-by-platform","title":"Command Examples by Platform","text":""},{"location":"user/command-creation/#cisco-iosios-xe","title":"Cisco IOS/IOS-XE","text":"<pre><code>show version\nshow running-config\nshow interfaces status\nshow ip interface brief\nshow inventory\nshow environment all\nshow processes cpu sorted\nshow ip route\n</code></pre>"},{"location":"user/command-creation/#cisco-nx-os","title":"Cisco NX-OS","text":"<pre><code>show version\nshow running-config\nshow interface status\nshow ip interface brief\nshow inventory\nshow environment\nshow processes cpu sort\nshow ip route\n</code></pre>"},{"location":"user/command-creation/#juniper-junos","title":"Juniper Junos","text":"<pre><code>show version\nshow configuration\nshow interfaces terse\nshow chassis hardware\nshow chassis environment\nshow system processes extensive\nshow route\n</code></pre>"},{"location":"user/command-creation/#arista-eos","title":"Arista EOS","text":"<pre><code>show version\nshow running-config\nshow interfaces status\nshow ip interface brief\nshow inventory\nshow environment all\nshow processes top\nshow ip route\n</code></pre>"},{"location":"user/command-creation/#command-organization","title":"Command Organization","text":"<ul> <li>Naming Conventions: Use consistent naming patterns (e.g., \"Show - Interface Status\", \"Config - VLAN Setup\")</li> <li>Tags: Apply tags to group related commands for easier filtering</li> <li>Descriptions: Provide clear descriptions of command purpose and expected output</li> </ul>"},{"location":"user/command-creation/#platform-specific-commands","title":"Platform-Specific Commands","text":"<ul> <li>Always specify the correct platform when creating commands</li> <li>Consider platform-specific syntax differences</li> </ul>"},{"location":"user/device-credentials/","title":"Device Credentials","text":"<p>This guide explains how to create and manage secure device credential in the NetBox Toolkit Plugin.</p>"},{"location":"user/device-credentials/#overview","title":"Overview","text":"<p>Device Credential provide a secure way to store and manage network device credentials with:</p> <ul> <li>Encrypted Storage: All passwords are encrypted using Fernet encryption</li> <li>Token-Based API Access: Generate unique credential tokens for API operations</li> <li>User Isolation: Credential tokens are bound to specific users</li> <li>Audit Trail: All credential usage is logged for security compliance</li> </ul>"},{"location":"user/device-credentials/#creating-credential","title":"Creating Credential","text":""},{"location":"user/device-credentials/#step-1-access-credential-management","title":"Step 1: Access Credential Management","text":"<ol> <li>Log in to your NetBox instance</li> <li>Navigate to Command Toolkit &gt; Device Credential</li> <li>Click \"Add\" to create a new credential</li> </ol>"},{"location":"user/device-credentials/#step-2-configure-credential-details","title":"Step 2: Configure Credential Details","text":"<p>Fill in the credential information:</p> <ul> <li>Name: Descriptive name for the credential (e.g., \"Core Routers - Admin\", \"Lab Switches - Readonly\")</li> <li>Description: Optional notes about the credential purpose or scope</li> <li>Platforms: Select specific network platforms or leave blank to apply to all platforms</li> <li>Username: Device login username</li> <li>Password: Device login password</li> </ul>"},{"location":"user/device-credentials/#step-3-save-and-generate-token","title":"Step 3: Save and Generate Token","text":"<ol> <li>Click \"Create\" to save the credential</li> <li>The system will automatically generate a unique Credential Token</li> <li>Copy the Credential Token for API usage</li> </ol>"},{"location":"user/device-credentials/#security-features","title":"Security Features","text":""},{"location":"user/device-credentials/#encryption","title":"Encryption","text":"<ul> <li>All passwords are encrypted using Fernet encryption</li> <li>Each credential uses a unique encryption key</li> <li>Passwords are never stored in plain text</li> </ul>"},{"location":"user/device-credentials/#token-based-access","title":"Token-Based Access","text":"<ul> <li>Each credential generates a unique credential token</li> <li>Tokens are used for API access to avoid transmitting usernames and passwords</li> <li>Tokens can be regenerated if compromised</li> <li>Tokens are bound to specific users for accountability</li> </ul>"},{"location":"user/device-credentials/#audit-logging","title":"Audit Logging","text":"<ul> <li>All credential usage during command execution is logged with user attribution</li> <li>View credential usage history in command logs</li> <li>Track which users accessed which devices</li> </ul>"},{"location":"user/device-credentials/#using-credentials","title":"Using Credentials","text":""},{"location":"user/device-credentials/#web-interface-usage","title":"Web Interface Usage","text":"<ol> <li>When executing commands, you can either:</li> <li>Select a stored credential from the dropdown, or</li> <li>Enter device credentials manually in the execution form</li> <li>The plugin will use the provided credentials securely</li> </ol>"},{"location":"user/device-credentials/#api-integration","title":"API Integration","text":"<p>The API requires the use of credential tokens for enhanced security:</p> <pre><code>curl -X POST \"https://netbox.example.com/api/plugins/toolkit/commands/17/execute/\" \\\n  -H \"Authorization: Token &lt;your-netbox-api-token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"device_id\": 1,\n    \"credential_token\": \"&lt;your-credential-token&gt;\"\n  }'\n</code></pre>"},{"location":"user/gui-vs-api/","title":"API vs Web Interface Feature Comparison","text":"<p>This document provides a comprehensive comparison between the NetBox Toolkit Plugin's REST API and Web Interface capabilities.</p>"},{"location":"user/gui-vs-api/#detailed-comparison","title":"Detailed Comparison","text":""},{"location":"user/gui-vs-api/#permission-creation-management","title":"Permission Creation &amp; Management","text":"Capability Web Interface API Notes Create ObjectPermissions \u2705 NetBox UI \u2705 NetBox API Uses NetBox's built-in permission system Assign Actions \u2705 <code>execute_show</code>, <code>execute_config</code> \u2705 Same actions Custom permission actions User/Group Assignment \u2705 Visual selection \u2705 Programmatic assignment - Bulk Permission Creation \u274c Manual only \u2705 API automation API enables programmatic permission management Permission Templates \u274c \u2705 Scriptable Create standardized permission sets via API Constraint Configuration \u2705 Visual form \u2705 JSON structure API requires understanding of constraint syntax"},{"location":"user/gui-vs-api/#credential-creation-management","title":"Credential Creation &amp; Management","text":"Capability Web Interface API Notes Create Credential Sets \u2705 Form-based \u274c Web Interface only - Security by design Edit/Update Credentials \u2705 Edit form \u274c Web Interface only - Prevents password transmission Delete Credential Sets \u2705 Delete action \u274c Web Interface only Platform Restrictions \u2705 Multi-select platforms \u274c Configure during web creation Generate Access Token \u2705 Auto-generated on save N/A Token used for API command execution View Token \u2705 Displayed after creation N/A Token visible only once for security View Credential List \u2705 List view \u274c Web Interface only Credential Encryption \u2705 Automatic N/A Passwords encrypted at rest Last Used Tracking \u2705 Displayed in list N/A Automatic timestamp updates Active/Inactive Status \u2705 Toggle switch N/A Disable without deletion Use Token in Execution N/A \u2705 <code>credential_token</code> field API uses tokens, not credentials directly <p>Use Web Interface For:</p> <ul> <li>ALL credential management operations (create, edit, delete)</li> </ul> <p>API Design:</p> <ul> <li>\u274c No API endpoints for credential CRUD - By design for security</li> <li>\u2705 API uses credential tokens only - Created via Web Interface</li> <li>\ud83d\udd12 Why? Prevents password transmission over API, enforces secure credential management</li> </ul> <p>Security Note: Credentials (username/password) can only be created and managed through the Web Interface. The API accepts only pre-generated <code>credential_token</code> values for command execution, ensuring passwords are never transmitted via API calls.</p>"},{"location":"user/gui-vs-api/#command-creation","title":"Command Creation","text":"Capability Web Interface API Notes Create/Edit Commands \u2705 Form-based \u2705 Programmatic Full CRUD operations Variable Management \u2705 Inline formsets \u2705 Nested serializers Create variables with commands Platform Assignment \u2705 Multi-select dropdown \u2705 Array of IDs Assign multiple platforms Command Type Selection \u2705 Radio buttons \u2705 String field <code>show</code> or <code>config</code> Validation \u2705 Real-time form validation \u2705 Serializer validation Same validation rules Advanced Filtering \u26a0\ufe0f Basic search \u2705 Full filter options API: filter by platform, type, name patterns Bulk Command Creation \u274c \u2705 API automation Create multiple commands programmatically Import from Templates \u274c \u2705 Scriptable Import command libraries via API"},{"location":"user/gui-vs-api/#command-execution","title":"Command Execution","text":"Capability Web Interface API Notes Single Device Execution \u2705 Interactive form \u2705 POST <code>/execute/</code> Same functionality Multi-Device Execution \u274c \u2705 POST <code>/bulk-execute/</code> API exclusive Variable Discovery \u2705 Dynamic dropdowns \u2705 GET <code>/variable-choices/</code> API enables programmatic discovery Variable Validation \u2705 Client-side validation \u2705 Enhanced server validation API provides detailed error messages Real-time Output \u2705 Live display \u2705 JSON response Web shows formatted, API returns structured Syntax Error Detection \u2705 Visual indicators \u2705 Response field Both detect and report syntax errors Parsed Output \u2705 Download CSV \u2705 JSON field API includes parsed data in response Credential Management \u2705 Credential Set selection \u2705 <code>credential_token</code> Both use DeviceCredentialSet tokens Rate Limit Status \u2705 Real-time widget \u26a0\ufe0f Check separately Web shows live status Execution Timeout \u2705 Default 30s \u2705 Configurable 5-300s API allows custom timeout"},{"location":"user/gui-vs-api/#command-history-logging","title":"Command History &amp; Logging","text":"Capability Web Interface API Notes Browse History \u2705 Paginated list \u2705 GET <code>/command-logs/</code> Both support filtering View Execution Details \u2705 Detail page \u2705 GET <code>/command-logs/{id}/</code> Full execution details Filter by Device \u2705 Filter form \u2705 <code>?device_id=</code> - Filter by Command \u2705 Filter form \u2705 <code>?command_id=</code> - Filter by User \u2705 Filter form \u2705 <code>?user_id=</code> - Filter by Date Range \u2705 Date picker \u2705 <code>?created__gte=&amp;created__lte=</code> API supports more date formats Filter by Success/Failure \u2705 Status filter \u2705 <code>?success=true/false</code> - Export Single Log CSV \u2705 Per-log download \u2705 Included in response Export parsed data Bulk Export \u274c \u2705 GET <code>/export/?format=csv</code> API exclusive Date-Filtered Export \u274c \u2705 <code>&amp;start_date=&amp;end_date=</code> API exclusive Statistics Dashboard \u2705 Statistics page \u2705 GET <code>/statistics/</code> Both show same metrics Success Rate Analytics \u2705 Visual charts \u2705 JSON response Same data, different format Error Pattern Analysis \u2705 Common errors table \u2705 Common errors report Same data, different format Top Commands Report \u2705 Visual ranking \u2705 Statistics endpoint Same data, different format Recent Activity Widget \u2705 Last 24h stats \u2705 Statistics endpoint Web shows widget, API returns data"},{"location":"user/gui-vs-api/#api-exclusive-use-cases","title":"API-Exclusive Use Cases","text":"<p>The following capabilities are only available through the API and have no Web Interface equivalent:</p>"},{"location":"user/gui-vs-api/#1-bulk-multi-device-execution","title":"1. Bulk Multi-Device Execution","text":"<pre><code># Execute command across multiple devices simultaneously\ncurl -X POST \"https://netbox.example.com/api/plugins/toolkit/commands/bulk-execute/\" \\\n  -H \"Authorization: Token YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"executions\": [\n      {\n        \"command_id\": 5,\n        \"device_id\": 101,\n        \"credential_token\": \"YOUR_CREDENTIAL_TOKEN\",\n        \"variables\": {\"vlan_id\": \"100\", \"description\": \"Guest Network\"}\n      },\n      {\n        \"command_id\": 5,\n        \"device_id\": 102,\n        \"credential_token\": \"YOUR_CREDENTIAL_TOKEN\",\n        \"variables\": {\"vlan_id\": \"100\", \"description\": \"Guest Network\"}\n      }\n    ]\n  }'\n</code></pre>"},{"location":"user/gui-vs-api/#2-bulk-export-with-date-filtering","title":"2. Bulk Export with Date Filtering","text":"<pre><code># Export filtered logs for compliance reporting\nGET /api/plugins/toolkit/command-logs/export/?format=csv&amp;start_date=2025-01-01&amp;end_date=2025-12-31\n</code></pre>"},{"location":"user/gui-vs-api/#3-programmatic-variable-discovery","title":"3. Programmatic Variable Discovery","text":"<pre><code># Discover available variable choices for a device\nGET /api/plugins/toolkit/commands/1/variable-choices/?device_id=123\n\n# Returns NetBox data (interfaces, VLANs, IPs) available for that device\n</code></pre>"},{"location":"user/gui-vs-api/#4-programmatic-statistics-access","title":"4. Programmatic Statistics Access","text":"<pre><code># Get execution statistics in JSON format for integration with monitoring systems\nGET /api/plugins/toolkit/command-logs/statistics/\n\n# Response includes:\n# - Overall success rate\n# - Last 24h execution counts\n# - Top 10 most-used commands\n# - Common error patterns\n</code></pre> <p>Note: While statistics are viewable in both the Web Interface (visual dashboard) and API (JSON response), the API format is designed for programmatic integration with external monitoring and reporting systems.</p>"},{"location":"user/gui-vs-api/#conclusion","title":"Conclusion","text":"<p>The NetBox Toolkit Plugin provides complete feature parity between its web interface and API for core functionality, with the API offering additional capabilities for automation, integration, and programmatic workflows. Users can seamlessly transition between both interfaces based on their specific use cases.</p> <p>Key Distinctions:</p> <ul> <li>Credential Management: Web Interface only - All credential CRUD operations must be done via web for security</li> <li>Statistics &amp; Analytics: Available in both\u2014Web Interface provides visual dashboards, API provides JSON for programmatic integration</li> <li>Bulk Operations: API-exclusive for multi-device command execution</li> <li>Export: Web Interface supports single-log CSV export, API supports bulk export with date filtering</li> <li>Command Execution: Single device in Web Interface, single or bulk in API</li> </ul>"},{"location":"user/logging/","title":"NetBox Toolkit Plugin - Logging Guide","text":""},{"location":"user/logging/#quick-setup-most-users","title":"Quick Setup (Most Users)","text":"<p>The plugin automatically logs important messages. To see them, you just need to enable console output in NetBox.</p>"},{"location":"user/logging/#step-1-enable-netbox-console-logging","title":"Step 1: Enable NetBox Console Logging","text":"<p>Add this to your NetBox <code>configuration.py</code> file:</p> <pre><code>LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n            'level': 'INFO',\n        },\n    },\n    'root': {\n        'handlers': ['console'],\n        'level': 'INFO',\n    },\n}\n</code></pre>"},{"location":"user/logging/#debug-mode-troubleshooting","title":"Debug Mode (Troubleshooting)","text":"<p>If you need more detailed logging for troubleshooting, add this to your NetBox <code>configuration.py</code>:</p> <pre><code># Plugin configuration - enable debug logging\nPLUGINS_CONFIG = {\n    'netbox_toolkit_plugin': {\n        'debug_logging': True,  # Enable detailed debug messages\n\n        # Your other plugin settings...\n        'rate_limiting_enabled': True,\n        'device_command_limit': 10,\n        'time_window_minutes': 5,\n    }\n}\n\n# Basic logging configuration\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n            'level': 'DEBUG',  # Show debug messages\n        },\n    },\n    'root': {\n        'handlers': ['console'],\n        'level': 'DEBUG',\n    },\n}\n</code></pre> <p>With debug mode enabled, you'll see detailed messages about:</p> <ul> <li>Connection attempts and retries</li> <li>Command execution timing</li> <li>Configuration details</li> </ul>"},{"location":"user/logging/#normal-mode-info-level","title":"Normal Mode (INFO level)","text":"<ul> <li>\u2705 Commands being sent to devices</li> <li>\u26a0\ufe0f Connection issues and retries</li> <li>\u274c Authentication and execution failures</li> </ul>"},{"location":"user/logging/#debug-mode-debug-level","title":"Debug Mode (DEBUG level)","text":"<ul> <li> <p>All of the above, plus:</p> </li> <li> <p>Connection parameter details</p> </li> <li>Retry logic and timing</li> <li>Connector selection process</li> </ul>"},{"location":"user/logging/#summary","title":"Summary","text":"<ul> <li>Default: Plugin works silently (no NetBox logging configured)</li> <li>Troubleshooting: Add basic <code>LOGGING</code> config to see command execution and issues</li> <li>Deep Debugging: Add <code>debug_logging: True</code> for detailed troubleshooting information</li> </ul>"},{"location":"user/permission-examples/","title":"NetBox Toolkit Plugin - Permission Examples","text":"<p>This page provides complete step-by-step examples for setting up permissions for the NetBox Toolkit Plugin using NetBox's Object-Based Permission system.</p>"},{"location":"user/permission-examples/#permission-example","title":"Permission Example","text":"<p>Below are the groups that we will be use for the permissions example. Each of these groups will be assigned specific permissions.</p> <ol> <li>Junior Network Engineers</li> <li>Senior Network Engineers</li> <li>Network Administrators</li> </ol>"},{"location":"user/permission-examples/#desired-user-matrix","title":"Desired User Matrix","text":"<p>The desired user capabilities for our example are as follows:</p> User Role View Commands Execute Show Execute Config Manage Commands View Logs Manage Logs Junior Network Engineers \u2705 \u2705 (show only) \u274c \u274c \u2705 \u274c Senior Network Engineers \u2705 \u2705 \u2705 \u274c \u2705 \u274c Network Administrators \u2705 \u2705 \u2705 \u2705 \u2705 \u2705"},{"location":"user/permission-examples/#permission-design","title":"Permission Design","text":""},{"location":"user/permission-examples/#granular-permission-design","title":"Granular Permission Design","text":"<p>To achieve the above we need to create reusable permissions that can then be assigned to multiple groups or users.</p> <p>Here are the permissions we will setup:</p> Permission Purpose Applied to Groups Command Toolkit - View Commands View command list and details All groups Command Toolkit - Execute Show Commands Execute show/monitoring commands only All groups Command Toolkit - Execute Config Commands Execute configuration commands Senior Engineers, Admins Command Toolkit - Manage Commands Create, edit, delete commands Admins only Command Toolkit - View Command Logs View execution history All groups Command Toolkit - Manage Command Logs Manage log entries Admins only"},{"location":"user/permission-examples/#create-groups","title":"Create Groups","text":"<p>WE will now create the groups and permission above and assign to users.</p>"},{"location":"user/permission-examples/#step-1-create-user-groups","title":"Step 1: Create User Groups","text":"<ol> <li>Navigate to Admin \u2192 Users \u2192 Groups</li> <li>Click + Add Group to create each of the following groups:</li> </ol>"},{"location":"user/permission-examples/#group-1-junior-network-engineers","title":"Group 1: Junior Network Engineers","text":"<ul> <li>Name: <code>Junior Network Engineers</code></li> <li>Permissions: Leave empty (we'll use NetBox Permissions)</li> <li>Save</li> </ul>"},{"location":"user/permission-examples/#group-2-senior-network-engineers","title":"Group 2: Senior Network Engineers","text":"<ul> <li>Name: <code>Senior Network Engineers</code></li> <li>Permissions: Leave empty (we'll use NetBox Permissions)</li> <li>Save</li> </ul>"},{"location":"user/permission-examples/#group-3-network-administrators","title":"Group 3: Network Administrators","text":"<ul> <li>Name: <code>Network Administrators</code></li> <li>Permissions: Leave empty (we'll use NetBox Permissions)</li> <li>Save</li> </ul>"},{"location":"user/permission-examples/#create-permissions-assign-to-groups","title":"Create Permissions &amp; Assign to Groups","text":"<p>Navigate to Admin \u2192 Users \u2192 Permissions and create the following reusable permissions:</p>"},{"location":"user/permission-examples/#permission-1-toolkit-view-commands","title":"Permission 1: Toolkit - View Commands","text":"<ul> <li>Name: <code>Toolkit - View Commands</code></li> <li>Object Types: Select <code>Toolkit Plugin | command</code></li> <li>Actions: Check <code>view</code></li> <li>Additional Actions: Leave empty</li> <li>Groups: Select <code>Junior Network Engineers</code>, <code>Senior Network Engineers</code>, <code>Network Administrators</code></li> <li>Enabled: \u2713</li> <li>Save</li> </ul>"},{"location":"user/permission-examples/#permission-2-toolkit-execute-show-commands","title":"Permission 2: Toolkit - Execute Show Commands","text":"<ul> <li>Name: <code>Toolkit - Execute Show Commands</code></li> <li>Object Types: Select <code>Toolkit Plugin | command</code></li> <li>Actions: Leave the checkboxes empty</li> <li>Additional Actions: Type <code>execute_show</code></li> <li>Groups: Select <code>Junior Network Engineers</code>, <code>Senior Network Engineers</code>, <code>Network Administrators</code></li> <li>Enabled: \u2713</li> <li>Save</li> </ul>"},{"location":"user/permission-examples/#permission-3-toolkit-execute-config-commands","title":"Permission 3: Toolkit - Execute Config Commands","text":"<ul> <li>Name: <code>Toolkit - Execute Config Commands</code></li> <li>Object Types: Select <code>Toolkit Plugin | command</code></li> <li>Actions: Leave the checkboxes empty</li> <li>Additional Actions: Type <code>execute_config</code></li> <li>Groups: Select <code>Senior Network Engineers</code>, <code>Network Administrators</code> (NOT Junior Engineers)</li> <li>Enabled: \u2713</li> <li>Save</li> </ul>"},{"location":"user/permission-examples/#permission-4-toolkit-manage-commands","title":"Permission 4: Toolkit - Manage Commands","text":"<ul> <li>Name: <code>Toolkit - Manage Commands</code></li> <li>Object Types: Select <code>Toolkit Plugin | command</code></li> <li>Actions: Check <code>add</code>, <code>change</code>, <code>delete</code></li> <li>Additional Actions: Leave empty</li> <li>Groups: Select <code>Network Administrators</code> (ONLY Admins)</li> <li>Enabled: \u2713</li> <li>Save</li> </ul>"},{"location":"user/permission-examples/#permission-5-toolkit-view-command-logs","title":"Permission 5: Toolkit - View Command Logs","text":"<ul> <li>Name: <code>Toolkit - View Command Logs</code></li> <li>Object Types: Select <code>Toolkit Plugin | command log</code></li> <li>Actions: Check <code>view</code></li> <li>Additional Actions: Leave empty</li> <li>Groups: Select <code>Junior Network Engineers</code>, <code>Senior Network Engineers</code>, <code>Network Administrators</code></li> <li>Enabled: \u2713</li> <li>Save</li> </ul>"},{"location":"user/permission-examples/#permission-6-toolkit-manage-command-logs","title":"Permission 6: Toolkit - Manage Command Logs","text":"<ul> <li>Name: <code>Toolkit - Manage Command Logs</code></li> <li>Object Types: Select <code>Toolkit Plugin | command log</code></li> <li>Actions: Check <code>add</code>, <code>change</code>, <code>delete</code></li> <li>Additional Actions: Leave empty</li> <li>Groups: Select <code>Network Administrators</code> (ONLY Admins)</li> <li>Enabled: \u2713</li> <li>Save</li> </ul>"},{"location":"user/permission-examples/#assign-users-to-groups","title":"Assign Users to Groups","text":"<ol> <li>Navigate to Admin \u2192 Users \u2192 Users</li> <li>Click on a user to edit them</li> <li>In the Groups section, select the appropriate group(s)</li> <li>Save</li> </ol>"},{"location":"user/permission-examples/#advanced-examples-with-constraints","title":"Advanced Examples with Constraints","text":""},{"location":"user/permission-examples/#example-1-restricted-view-and-execute-permissions","title":"Example 1: Restricted View and Execute Permissions","text":"<p>Scenario: Users can only view and execute the \"show version\" command specifically.</p>"},{"location":"user/permission-examples/#permission-1-view-show-version-commands-only","title":"Permission 1: View Show Version Commands Only","text":"<pre><code>Name: \"Toolkit - View Show Version Commands Only\"\nObject Types: Toolkit Plugin | command\nActions: \u2713 view\nAdditional Actions: (leave empty)\nConstraints: {\n  \"command_type\": \"show\",\n  \"name\": \"Show Version\"\n}\nGroups: Junior Network Engineers\n</code></pre>"},{"location":"user/permission-examples/#permission-2-execute-show-version-commands-only","title":"Permission 2: Execute Show Version Commands Only","text":"<pre><code>Name: \"Toolkit - Execute Show Version Commands Only\"\nObject Types: Toolkit Plugin | command\nActions: (leave unchecked)\nAdditional Actions: execute_show\nConstraints: {\n  \"command_type\": \"show\",\n  \"name\": \"Show Version\"\n}\nGroups: Junior Network Engineers\n</code></pre> <p>Result: Users can only see and execute commands that: - Are of type \"show\" (read-only operations) - Command name is exactly \"Show Version\"</p>"},{"location":"user/permission-examples/#example-2-platform-specific-permissions","title":"Example 2: Platform-Specific Permissions","text":"<p>Scenario: Network team can only view and execute Cisco platform commands.</p>"},{"location":"user/permission-examples/#permission-1-view-cisco-commands","title":"Permission 1: View Cisco Commands","text":"<pre><code>Name: \"Toolkit - View Cisco Commands\"\nObject Types: Toolkit Plugin | command\nActions: \u2713 view\nConstraints: {\n  \"platform__slug__in\": [\"cisco_ios\", \"cisco_nxos\", \"cisco_iosxr\"]\n}\nGroups: Network Team\n</code></pre>"},{"location":"user/permission-examples/#permission-2-execute-cisco-show-commands","title":"Permission 2: Execute Cisco Show Commands","text":"<pre><code>Name: \"Toolkit - Execute Cisco Show Commands\"\nObject Types: Toolkit Plugin | command\nAdditional Actions: execute_show\nConstraints: {\n  \"command_type\": \"show\",\n  \"platform__slug__in\": [\"cisco_ios\", \"cisco_nxos\", \"cisco_iosxr\"]\n}\nGroups: Network Team\n</code></pre>"},{"location":"user/permission-examples/#example-3-tag-based-command-access","title":"Example 3: Tag-Based Command Access","text":"<p>Scenario: Users can only access commands tagged as \"safe\" or \"monitoring\".</p>"},{"location":"user/permission-examples/#permission-safe-monitoring-commands","title":"Permission: Safe Monitoring Commands","text":"<pre><code>Name: \"Toolkit - Safe Monitoring Commands\"\nObject Types: Toolkit Plugin | command\nActions: \u2713 view\nAdditional Actions: execute_show\nConstraints: {\n  \"command_type\": \"show\",\n  \"tags__name__in\": [\"safe\", \"monitoring\"]\n}\nGroups: Monitoring Team\n</code></pre>"},{"location":"user/permissions-creation/","title":"Permissions Creation","text":"<p>This guide shows how to set up permissions for the NetBox Toolkit Plugin.</p> <p>The Toolkit Plugin uses NetBox's built-in Object-Based Permission system. This allows for very granular access control, but can seem confusing at first. The plugin permissions can control access to the following features:</p> <ul> <li>Command Management (create, edit, delete commands)</li> <li>Command Execution (run show commands vs config commands)</li> <li>Command Log Access (view command execution history)</li> <li>Credential Set Management (create, view, use credentials)</li> </ul>"},{"location":"user/permissions-creation/#netbox-permission-system-overview","title":"NetBox Permission System Overview","text":"<p>The plugin uses NetBox's ObjectPermission system with these key components:</p>"},{"location":"user/permissions-creation/#1-standard-permissions","title":"1. Standard Permissions","text":"<ul> <li>View: View command lists and details, credential sets, command logs</li> <li>Add: Create new commands and credential sets</li> <li>Change: Edit existing commands and credential sets</li> <li>Delete: Remove commands and credential sets</li> </ul>"},{"location":"user/permissions-creation/#2-custom-actions","title":"2. Custom Actions","text":"<ul> <li><code>execute_show</code>: Execute show/monitoring commands (read-only operations)</li> <li><code>execute_config</code>: Execute configuration commands (write operations)</li> </ul>"},{"location":"user/permissions-creation/#3-toolkit-plugin-object-types","title":"3. Toolkit Plugin Object Types","text":"<ul> <li>Command: Network command definitions</li> <li>Command Log: Command execution history</li> <li>Device Credential Set: Secure credential storage</li> </ul>"},{"location":"user/permissions-creation/#creating-permissions","title":"Creating Permissions","text":""},{"location":"user/permissions-creation/#step-1-goto-permission-management-page","title":"Step 1: Goto Permission Management Page","text":"<ol> <li>Log in to NetBox as a superuser or administrator</li> <li>Navigate to Admin &gt; Permissions</li> <li>Click \"Add\" to create a new permission</li> </ol>"},{"location":"user/permissions-creation/#step-2-configure-basic-permission-details","title":"Step 2: Configure Basic Permission Details","text":"<ol> <li>Name: Descriptive name (e.g., \"Toolkit - Execute Show Commands Only\")</li> <li>Actions: Choose from View, Add, Change, Delete</li> <li>Additional Actions: Type <code>execute_show</code> and/or <code>execute_config</code> as needed</li> <li>Object Types: Select the appropriate object types:<ul> <li><code>Toolkit Plugin | Command</code> for command permissions</li> <li><code>Toolkit Plugin | Command Log</code> for log access</li> <li><code>Toolkit Plugin | Device Credential Set</code> for credential access</li> </ul> </li> <li>Constraints (optional): Use JSON to filter permissions further (see below) <p>Important: Any user that will execute commands will need View, Add, Change, Delete permission for 'Command Toolkit | devicecredentialset'</p> </li> </ol>"},{"location":"user/permissions-creation/#step-3-assign-to-usersgroups","title":"Step 3: Assign to Users/Groups","text":"<p>The permission needs to be assinged to user or groups. This can be done on the permiosson screen or in the Users or Groups admin pages.</p>"},{"location":"user/permissions-creation/#permission-examples","title":"Permission Examples","text":""},{"location":"user/permissions-creation/#example-1-junior-network-engineers","title":"Example 1: Junior Network Engineers","text":"<p>Show Command Execution Only <pre><code>Name: \"Toolkit - Junior Engineers - Show Commands Only\"\nObject Types: Command Toolkit | command\nActions: \u2713 view\nAdditional Actions: execute_show\nConstraints: {\"command_type\": \"show\"}\nGroups: Junior Network Engineers\n</code></pre></p> <p>Command Log Access <pre><code>Name: \"Toolkit - Junior Engineers - Command Logs\"\nObject Types: Command Toolkit | commandlog\nActions: \u2713 view\nGroups: Junior Network Engineers\n</code></pre></p> <p>Credential Permission <pre><code>Name: \"Toolkit - Credential Sets\"\nObject Types: Command Toolkit | devicecredentialset\nActions: \u2713 view, \u2713 add, \u2713 change, \u2713 delete\nGroups: Junior Network Engineers\n</code></pre></p>"},{"location":"user/permissions-creation/#example-2-senior-network-engineers","title":"Example 2: Senior Network Engineers","text":"<p>Full Command Management <pre><code>Name: \"Toolkit - Senior Engineers - Full Access\"\nObject Types: Command Toolkit | command\nActions: \u2713 view, \u2713 add, \u2713 change, \u2713 delete\nAdditional Actions: execute_show, execute_config\nGroups: Senior Network Engineers\n</code></pre></p> <p>Credential Permission <pre><code>Name: \"Toolkit - Credential Sets\"\nObject Types: Command Toolkit | devicecredentialset\nActions: \u2713 view, \u2713 add, \u2713 change, \u2713 delete\nGroups: Senior Network Engineers\n</code></pre></p>"},{"location":"user/permissions-creation/#using-constraints","title":"Using Constraints","text":"<p>Constraints use Django ORM field lookups to filter permissions based on object attributes.</p>"},{"location":"user/permissions-creation/#basic-constraint-examples","title":"Basic Constraint Examples","text":""},{"location":"user/permissions-creation/#filter-by-command-type","title":"Filter by Command Type","text":"<p><pre><code>{\"command_type\": \"show\"}\n</code></pre> Only allows access to show commands.</p>"},{"location":"user/permissions-creation/#filter-by-platform","title":"Filter by Platform","text":"<p><pre><code>{\"platform__slug\": \"cisco_ios\"}\n</code></pre> Only allows access to Cisco IOS commands.</p>"},{"location":"user/permissions-creation/#filter-by-command-name","title":"Filter by Command Name","text":"<p><pre><code>{\"name__icontains\": \"version\"}\n</code></pre> Only allows access to commands containing \"version\".</p>"},{"location":"user/permissions-creation/#advanced-constraint-examples","title":"Advanced Constraint Examples","text":""},{"location":"user/permissions-creation/#and-logic-all-conditions-must-be-true","title":"AND Logic (all conditions must be true)","text":"<p><pre><code>{\n  \"command_type\": \"show\",\n  \"platform__slug\": \"cisco_ios\"\n}\n</code></pre> Only show commands on Cisco IOS platforms.</p>"},{"location":"user/permissions-creation/#or-logic-any-condition-can-be-true","title":"OR Logic (any condition can be true)","text":"<p><pre><code>[\n  {\"platform__slug\": \"cisco_ios\"},\n  {\"platform__slug\": \"cisco_nxos\"}\n]\n</code></pre> Commands on either Cisco IOS or NX-OS platforms.</p>"},{"location":"user/permissions-creation/#field-value-lists","title":"Field Value Lists","text":"<p><pre><code>{\"platform__slug__in\": [\"cisco_ios\", \"cisco_nxos\", \"juniper_junos\"]}\n</code></pre> Commands on any of the specified platforms.</p>"},{"location":"user/permissions-creation/#text-pattern-matching","title":"Text Pattern Matching","text":"<p><pre><code>{\"name__icontains\": \"interface\"}\n</code></pre> Commands with \"interface\" in the name (case-insensitive).</p>"},{"location":"user/permissions-creation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user/permissions-creation/#common-permission-issues","title":"Common Permission Issues","text":""},{"location":"user/permissions-creation/#users-cant-see-commands","title":"Users Can't See Commands","text":"<ul> <li>Check: Verify user has \"View\" permission on Command Toolkit | command</li> <li>Solution: Add view permission or check constraints</li> </ul>"},{"location":"user/permissions-creation/#users-cant-execute-commands","title":"Users Can't Execute Commands","text":"<ul> <li>Check: Verify user has execute_show or execute_config permissions</li> <li>Solution: Add appropriate execution permissions</li> </ul>"},{"location":"user/plugin-configuration/","title":"Plugin Configuration","text":""},{"location":"user/plugin-configuration/#overview","title":"Overview","text":"<p>The NetBox Toolkit Plugin is configured through NetBox's standard <code>PLUGINS_CONFIG</code> dictionary in your <code>configuration.py</code> file.</p> <p>\u26a0\ufe0f REQUIRED: A security pepper must be configured (see Security Pepper section below). All other settings have sensible defaults.</p>"},{"location":"user/plugin-configuration/#basic-configuration","title":"Basic Configuration","text":""},{"location":"user/plugin-configuration/#minimal-setup-required","title":"Minimal Setup (Required)","text":"<pre><code># In your NetBox configuration.py\nPLUGINS = [\n    'netbox_toolkit_plugin',\n    # ... other plugins\n]\n\n# REQUIRED: Security pepper configuration\nPLUGINS_CONFIG = {\n    'netbox_toolkit_plugin': {\n        'security': {\n            'pepper': 'your-secure-pepper-value-minimum-32-chars',  # REQUIRED\n        },\n    },\n}\n</code></pre>"},{"location":"user/plugin-configuration/#full-configuration-all-options","title":"Full Configuration (All Options)","text":"<pre><code>PLUGINS_CONFIG = {\n    'netbox_toolkit_plugin': {\n        # REQUIRED\n        'security': {\n            'pepper': 'your-secure-pepper-value-minimum-32-chars',\n        },\n        # OPTIONAL - Rate limiting settings (showing defaults)\n        'rate_limiting_enabled': True,\n        'device_command_limit': 10,\n        'time_window_minutes': 5,\n        'bypass_users': [],\n        'bypass_groups': [],\n        'debug_logging': False,\n    },\n}\n</code></pre>"},{"location":"user/plugin-configuration/#rate-limiting-configuration","title":"Rate Limiting Configuration","text":""},{"location":"user/plugin-configuration/#why-rate-limiting","title":"Why Rate Limiting","text":"<p>Rate limiting prevents network devices from being overwhelmed by excessive command execution, which can:</p> <ul> <li>Impact device performance and stability</li> <li>Interfere with production traffic</li> <li>Trigger device protection mechanisms</li> <li>Create security audit concerns</li> </ul>"},{"location":"user/plugin-configuration/#how-it-works","title":"How It Works","text":"<ul> <li>Protection Window: When limit is reached, additional commands are blocked until the time window resets</li> <li>Bypass Capability: Designated users and groups can execute unlimited commands for emergency situations</li> <li>Real-time Feedback: Rate limit status is displayed in the device toolkit interface</li> </ul>"},{"location":"user/plugin-configuration/#rate-limiting-configuration-options","title":"Rate Limiting Configuration Options","text":""},{"location":"user/plugin-configuration/#rate_limiting_enabled-boolean","title":"<code>rate_limiting_enabled</code> (boolean)","text":"<ul> <li>Default: <code>True</code></li> <li>Purpose: Enable or disable rate limiting functionality</li> <li>Example: <code>'rate_limiting_enabled': False</code> to disable rate limiting entirely</li> </ul>"},{"location":"user/plugin-configuration/#device_command_limit-integer","title":"<code>device_command_limit</code> (integer)","text":"<ul> <li>Default: <code>10</code></li> <li>Purpose: Maximum number of commands allowed per device within the time window</li> <li>Example: <code>'device_command_limit': 5</code> for stricter limiting</li> </ul>"},{"location":"user/plugin-configuration/#time_window_minutes-integer","title":"<code>time_window_minutes</code> (integer)","text":"<ul> <li>Default: <code>5</code></li> <li>Purpose: Time window in minutes for rate limiting calculations</li> <li>Example: <code>'time_window_minutes': 10</code> for a 10-minute window</li> </ul>"},{"location":"user/plugin-configuration/#bypass_users-list","title":"<code>bypass_users</code> (list)","text":"<ul> <li>Default: <code>[]</code> (empty list)</li> <li>Purpose: List of usernames that bypass rate limiting completely</li> <li>Example: <code>'bypass_users': ['admin', 'service_account']</code></li> </ul>"},{"location":"user/plugin-configuration/#bypass_groups-list","title":"<code>bypass_groups</code> (list)","text":"<ul> <li>Default: <code>[]</code> (empty list)</li> <li>Purpose: List of group names where members bypass rate limiting</li> <li>Example: <code>'bypass_groups': ['Network Administrators', 'Senior Engineers']</code></li> </ul>"},{"location":"user/plugin-configuration/#debug_logging-boolean","title":"<code>debug_logging</code> (boolean)","text":"<ul> <li>Default: <code>False</code></li> <li>Purpose: Enable detailed debug logging for troubleshooting</li> <li>Example: <code>'debug_logging': True</code> to enable verbose logging</li> </ul>"},{"location":"user/plugin-configuration/#security-configuration","title":"Security Configuration","text":""},{"location":"user/plugin-configuration/#overview_1","title":"Overview","text":"<p>The plugin uses Argon2id for secure credential token hashing and Fernet encryption for storing device credentials. A security pepper is required for enhanced protection.</p>"},{"location":"user/plugin-configuration/#security-pepper-required","title":"Security Pepper (REQUIRED)","text":"<p>\u26a0\ufe0f CRITICAL: You must configure a security pepper before using the plugin.</p> <p>Choose the method that best fits your deployment:</p>"},{"location":"user/plugin-configuration/#method-1-configuration-file","title":"Method 1: Configuration File","text":"<p>First, generate a secure pepper:</p> <pre><code>python3 -c \"import secrets; print(secrets.token_urlsafe(48))\"\n</code></pre> <p>Then add it directly to your NetBox <code>configuration.py</code>:</p> <pre><code>PLUGINS_CONFIG = {\n    'netbox_toolkit_plugin': {\n        'security': {\n            'pepper': 'your-secure-pepper-value-minimum-32-chars',\n        },\n    },\n}\n</code></pre> <p>\u2705 Pros: Simple, persistent across reboots \u274c Cons: Visible in config file, risk of version control exposure</p> <p>Security Notes: - Never commit <code>configuration.py</code> with pepper to version control - Ensure proper file permissions: <code>chmod 640 /opt/netbox/netbox/netbox/configuration.py</code> - Consider using a separate secrets file that's excluded from git</p>"},{"location":"user/plugin-configuration/#method-2-environment-variable","title":"Method 2: Environment Variable","text":"<pre><code># 1. Generate a secure pepper\npython3 -c \"import secrets; print(secrets.token_urlsafe(48))\"\n\n# 2. Export in the shell where NetBox runs\nexport NETBOX_TOOLKIT_PEPPER=\"your-generated-pepper-here\"\n\n# 3. Restart NetBox\nsudo systemctl restart netbox netbox-rq\n</code></pre> <p>\u2705 Pros: Keeps pepper out of code, better for version control \u274c Cons: Lost on reboot/logout (credentials must be recreated)</p> <p>\u26a0\ufe0f Important: - This method only works if NetBox is run from the same shell session - With systemd, the export won't persist - use Method 1 for production - If the environment variable is lost, all credential tokens become invalid</p>"},{"location":"user/plugin-configuration/#dockerdocker-compose","title":"Docker/Docker Compose","text":"<p>For containerized deployments:</p> <pre><code># docker-compose.yml\nservices:\n  netbox:\n    environment:\n      - NETBOX_TOOLKIT_PEPPER=your-generated-pepper-here\n</code></pre> <p>Or use a <code>.env</code> file: <pre><code># .env file (same directory as docker-compose.yml)\nNETBOX_TOOLKIT_PEPPER=your-generated-pepper-here\n</code></pre></p> <p>Note: Docker environment variables persist across container restarts and system reboots.</p>"},{"location":"user/plugin-configuration/#quick-comparison","title":"Quick Comparison","text":"Method Persistent Setup Best For Config File \u2705 Yes Simple Production Export \u274c No* Simple Testing/Dev Docker \u2705 Yes Simple Containers <p>*Lost on reboot/logout <pre><code>PLUGINS_CONFIG = {\n    'netbox_toolkit_plugin': {\n        'security': {\n            'pepper': 'your-secure-pepper-value-minimum-32-chars',\n        },\n    },\n}\n</code></pre></p> <p>\u26a0\ufe0f Important Security Notes: - Pepper must be at least 32 characters long - Never commit the pepper to version control - Use environment variable for production deployments - Changing the pepper will invalidate all existing credential tokens</p>"},{"location":"user/plugin-configuration/#argon2id-configuration-optional","title":"Argon2id Configuration (Optional)","text":"<p>Fine-tune the Argon2id password hashing parameters:</p> <pre><code>PLUGINS_CONFIG = {\n    'netbox_toolkit_plugin': {\n        'security': {\n            'argon2': {\n                'time_cost': 3,        # Number of iterations (higher = more secure, slower)\n                'memory_cost': 65536,  # Memory usage in KB (64MB default)\n                'parallelism': 1,      # Number of parallel threads\n                'hash_len': 32,        # Hash output length in bytes\n                'salt_len': 16,        # Salt length in bytes\n            },\n            'master_key_derivation': 'argon2id',  # Key derivation method\n        },\n    },\n}\n</code></pre> <p>Performance vs Security Trade-offs: - Higher <code>time_cost</code>: More secure but slower credential operations - Higher <code>memory_cost</code>: More resistant to GPU attacks but uses more RAM - Higher <code>parallelism</code>: Faster on multi-core systems but uses more resources</p> <p>Recommended Settings: - Default (balanced): Good for most deployments - High Security: <code>time_cost=4</code>, <code>memory_cost=131072</code> (128MB) - Low Resource: <code>time_cost=2</code>, <code>memory_cost=32768</code> (32MB)</p>"},{"location":"user/plugin-configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"user/plugin-configuration/#ssh-transport-options","title":"SSH Transport Options","text":"<p>Customize SSH connection behavior for legacy or modern devices:</p> <pre><code>PLUGINS_CONFIG = {\n    'netbox_toolkit_plugin': {\n        'ssh_options': {\n            'disabled_algorithms': {\n                'kex': [],  # Key exchange algorithms to disable\n            },\n            'allowed_kex': [\n                'diffie-hellman-group-exchange-sha256',\n                'diffie-hellman-group16-sha512',\n                # Add more as needed\n            ],\n        },\n    },\n}\n</code></pre>"},{"location":"user/plugin-configuration/#netmiko-fallback-configuration","title":"Netmiko Fallback Configuration","text":"<p>Configure Netmiko behavior when Scrapli connections fail:</p> <pre><code>PLUGINS_CONFIG = {\n    'netbox_toolkit_plugin': {\n        'netmiko': {\n            'banner_timeout': 20,\n            'auth_timeout': 20,\n            'global_delay_factor': 1,\n            'fast_cli': False,  # Set True for faster connections on modern devices\n        },\n    },\n}\n</code></pre>"},{"location":"user/plugin-configuration/#connection-timeouts","title":"Connection Timeouts","text":"<p>While not directly configurable via PLUGINS_CONFIG, the plugin has intelligent timeout defaults: - Default timeouts: 15-30 seconds (suitable for most devices) - Device-specific overrides: Automatically applied for Catalyst and Nexus devices - Fast test mode: 8-second quick tests before full connection attempts</p>"},{"location":"user/plugin-configuration/#complete-configuration-example","title":"Complete Configuration Example","text":"<pre><code>PLUGINS_CONFIG = {\n    'netbox_toolkit_plugin': {\n        # Security (pepper via environment variable recommended)\n        'security': {\n            'argon2': {\n                'time_cost': 3,\n                'memory_cost': 65536,\n            },\n        },\n        # Rate limiting\n        'rate_limiting_enabled': True,\n        'device_command_limit': 10,\n        'time_window_minutes': 5,\n        'bypass_users': ['admin'],\n        'bypass_groups': ['Network Administrators'],\n        # Logging\n        'debug_logging': False,\n        # Advanced SSH options\n        'ssh_options': {\n            'allowed_kex': [\n                'diffie-hellman-group-exchange-sha256',\n                'diffie-hellman-group16-sha512',\n            ],\n        },\n        # Netmiko fallback\n        'netmiko': {\n            'banner_timeout': 20,\n            'fast_cli': False,\n        },\n    },\n}\n</code></pre>"},{"location":"user/plugin-configuration/#quick-reference","title":"Quick Reference","text":"Setting Default Description <code>rate_limiting_enabled</code> <code>True</code> Enable/disable rate limiting <code>device_command_limit</code> <code>10</code> Max successful commands per device per time window <code>time_window_minutes</code> <code>5</code> Time window for rate limiting in minutes <code>bypass_users</code> <code>[]</code> List of usernames that bypass rate limiting <code>bypass_groups</code> <code>[]</code> List of group names that bypass rate limiting <code>debug_logging</code> <code>False</code> Enable detailed debug logging"},{"location":"user/plugin-configuration/#next-steps","title":"Next Steps","text":"<p>After plugin installation and configuration:</p> <ol> <li>Set Up Permissoins: Permissions Setup Guide</li> <li>Create Commands: Command Creation</li> </ol>"},{"location":"user/plugin-configuration/#common-configuration-issues","title":"Common Configuration Issues","text":""},{"location":"user/plugin-configuration/#plugin-not-loading","title":"Plugin Not Loading","text":"<ul> <li>Symptom: \"Toolkit\" tab missing from device pages</li> <li>Check: Verify <code>'netbox_toolkit_plugin'</code> is in the <code>PLUGINS</code> list (exact spelling)</li> <li>Solution: Restart NetBox services after configuration changes</li> </ul>"},{"location":"user/plugin-configuration/#rate-limiting-not-working","title":"Rate Limiting Not Working","text":"<ul> <li>Symptom: Users can execute unlimited commands</li> <li>Check: Verify user is not in <code>bypass_users</code> or member of <code>bypass_groups</code></li> <li>Debug: Enable <code>debug_logging</code> to see rate limiting decisions</li> </ul>"},{"location":"user/plugin-installation/","title":"Installation","text":"<p>This guide covers the basic steps to install the NetBox Toolkit Plugin. For detailed configuration options, see the Plugin Configuration guide.</p>"},{"location":"user/plugin-installation/#installation-steps","title":"Installation Steps","text":""},{"location":"user/plugin-installation/#1-install-the-plugin","title":"1. Install the Plugin","text":"<p>Activate your virtual environment and install:</p> <pre><code>source /opt/netbox/venv/bin/activate\npip install netbox-toolkit-plugin\n</code></pre>"},{"location":"user/plugin-installation/#2-enable-the-plugin","title":"2. Enable the Plugin","text":"<p>Add to your NetBox <code>configuration.py</code>:</p> <pre><code>PLUGINS = [\n    'netbox_toolkit_plugin',\n]\n</code></pre>"},{"location":"user/plugin-installation/#3-configure-security-pepper-required","title":"3. Configure Security Pepper (REQUIRED)","text":"<p>The plugin requires a security pepper for credential encryption. Choose one method:</p> <p>Option A: Configuration File (Recommended)</p> <pre><code># Generate a secure pepper (copy the output)\npython3 -c \"import secrets; print(secrets.token_urlsafe(48))\"\n</code></pre> <p>Add to <code>configuration.py</code>:</p> <pre><code>PLUGINS_CONFIG = {\n    'netbox_toolkit_plugin': {\n        'security': {\n            'pepper': 'your-generated-pepper-here',  # Paste the generated value\n        },\n    },\n}\n</code></pre> <p>Option B: Environment Variable</p> <pre><code>export NETBOX_TOOLKIT_PEPPER=\"your-generated-pepper-here\"\n</code></pre> <p>\u26a0\ufe0f Warning: Using <code>export</code> only sets the variable for the current shell session. It will be lost on system reboot or when the shell closes. For production use with systemd, use Option A (config file) instead.</p> <p>Option C: Docker Compose</p> <pre><code>services:\n  netbox:\n    environment:\n      - NETBOX_TOOLKIT_PEPPER=your-generated-pepper-here\n</code></pre> <p>\ud83d\udcd6 More Details: See Plugin Configuration - Security Pepper for detailed setup options, pros/cons, and security best practices.</p>"},{"location":"user/plugin-installation/#4-run-database-migrations","title":"4. Run Database Migrations","text":"<pre><code>cd /opt/netbox/netbox\npython3 manage.py migrate netbox_toolkit_plugin\n</code></pre>"},{"location":"user/plugin-installation/#5-collect-static-files","title":"5. Collect Static Files","text":"<pre><code>python3 manage.py collectstatic --no-input\n</code></pre>"},{"location":"user/plugin-installation/#6-restart-netbox","title":"6. Restart NetBox","text":"<pre><code>sudo systemctl restart netbox netbox-rq\n</code></pre>"},{"location":"user/plugin-installation/#configure-optional-settings","title":"Configure Optional Settings","text":"<p>The plugin works with default settings, but you can customize:</p> <ul> <li>Rate Limiting: Control command execution frequency</li> <li>Debug Logging: Enable detailed logs for troubleshooting</li> <li>Advanced Security: Fine-tune Argon2id parameters</li> </ul> <p>\ud83d\udcd6 See Plugin Configuration for all available options.</p>"},{"location":"user/plugin-installation/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Set Up Permissions - Configure user access to plugin features</li> <li>Create Commands - Define platform-specific commands</li> <li>Add Credentials - Set up device credentials for command execution</li> </ol>"},{"location":"user/plugin-installation/#troubleshooting","title":"Troubleshooting","text":"<p>Plugin tab not appearing? - Verify plugin is in <code>PLUGINS</code> list - Check pepper is configured - Review logs: <code>sudo journalctl -u netbox -n 50</code></p> <p>Migration errors? - Ensure virtual environment is activated - Check database connectivity - See Plugin Upgrade for more help</p>"},{"location":"user/plugin-upgrade/","title":"Plugin Upgrade","text":"<p>This guide explains how to upgrade the NetBox Toolkit Plugin to a newer version.</p>"},{"location":"user/plugin-upgrade/#upgrade-process","title":"Upgrade Process","text":""},{"location":"user/plugin-upgrade/#1-activate-virtual-environment","title":"1. Activate Virtual Environment","text":"<pre><code>source /opt/netbox/venv/bin/activate\n</code></pre>"},{"location":"user/plugin-upgrade/#2-upgrade-the-plugin","title":"2. Upgrade the Plugin","text":"<pre><code>pip install --upgrade netbox-toolkit-plugin\n</code></pre>"},{"location":"user/plugin-upgrade/#3-apply-database-migrations","title":"3. Apply Database Migrations","text":"<p>Apply any new database migrations that come with the updated version:</p> <pre><code>cd /opt/netbox/netbox\npython3 manage.py migrate netbox_toolkit_plugin\n</code></pre>"},{"location":"user/plugin-upgrade/#4-collect-static-files","title":"4. Collect Static Files","text":"<p>Update static files (CSS, JavaScript) to ensure new features display correctly:</p> <pre><code>python3 manage.py collectstatic --no-input\n</code></pre>"},{"location":"user/plugin-upgrade/#5-restart-netbox-services","title":"5. Restart NetBox Services","text":"<p>Restart NetBox to load the new version:</p> <pre><code>sudo systemctl restart netbox netbox-rq\n</code></pre>"},{"location":"user/plugin-upgrade/#getting-help","title":"Getting Help","text":"<p>If you encounter issues during upgrade:</p> <ol> <li>Check the Changelog for known issues</li> <li>Review GitHub Issues</li> <li>Ask in GitHub Discussions</li> </ol>"}]}